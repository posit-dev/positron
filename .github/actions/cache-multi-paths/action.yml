name: "Cache Multiple Directories"
description: "Restores/Saves cache for node_modules, build, extensions, and remote"
runs:
  using: "composite"
  steps:
    - name: Cache root
      id: cache-root
      uses: actions/cache@v4
      with:
        path: ./node_modules
        key: cache-root-v2-${{ runner.os }}-${{ hashFiles('./yarn.lock') }}

    - name: Cache build
      id: cache-build
      uses: actions/cache@v4
      with:
        path: ./build/node_modules
        key: cache-build-v2-${{ runner.os }}-${{ hashFiles('build/yarn.lock') }}

    - name: Cache extensions
      id: cache-extensions
      uses: actions/cache@v4
      with:
        path: ./extensions/node_modules
        key: cache-extensions-v2-${{ runner.os }}-${{ hashFiles('extensions/yarn.lock') }}

    - name: Cache nested extensions
      id: cache-nested-extensions
      uses: actions/cache@v4
      with:
        path: ./extensions/**/node_modules
        key: cache-nested-extensions-v2-${{ runner.os }}-${{ hashFiles('extensions/**/yarn.lock') }}

    - name: Cache remote
      id: cache-remote
      uses: actions/cache@v4
      with:
        path: ./remote/node_modules
        key: cache-remote-v2-${{ runner.os }}-${{ hashFiles('remote/yarn.lock') }}

    - name: Cache nested remote
      id: cache-nested-remote
      uses: actions/cache@v4
      with:
        path: ./remote/**/node_modules
        key: cache-nested-remote-v2-${{ runner.os }}-${{ hashFiles('remote/**/yarn.lock') }}

    # Download requirements.txt and DESCRIPTION files for cache key calculation
    # Python: needed for e2e tests
    # R: needed for integration and e2e tests
    - name: Download dependency files
      shell: bash
      run: |
        curl https://raw.githubusercontent.com/posit-dev/qa-example-content/main/requirements.txt --output requirements.txt
        curl https://raw.githubusercontent.com/posit-dev/qa-example-content/main/DESCRIPTION --output DESCRIPTION

    # Cache Python dependencies based on the requirements.txt hash
    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: python-${{ hashFiles('requirements.txt') }}

    # Install Python dependencies only if the cache is not hit
    - name: Install python dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt
        python -m pip install ipykernel trcli

    # Cache R dependencies based on the DESCRIPTION file hash
    - name: Cache R dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/R
        key: R-${{ hashFiles('DESCRIPTION') }}

    # Install R and its dependencies only if the cache is not hit
    - name: Install rig and R
      shell: bash
      run: |
        curl -Ls https://github.com/r-lib/rig/releases/download/latest/rig-linux-"$(arch)"-latest.tar.gz | $(which sudo) tar xz -C /usr/local
        rig add 4.4.0
        Rscript -e "pak::local_install_dev_deps(ask = FALSE)"
