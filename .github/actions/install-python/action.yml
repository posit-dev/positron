name: "Setup Python"
description: "Install Python dependencies and alternate version."
inputs:
  alternate_version:
    description: "The alternate version of Python to install (e.g., 3.13.0)"
    required: true
    default: "3.13.0"
  install_undetectable_interpreters:
    description: "Install undetectable interpreters"
    required: true
    type: boolean
runs:
  using: "composite"
  steps:
    - name: Install Python dependencies
      shell: bash
      run: |
        curl https://raw.githubusercontent.com/posit-dev/qa-example-content/main/requirements.txt --output requirements.txt
        python3 -m pip install --upgrade pip
        python3 -m pip install -r requirements.txt

    - name: Verify Python Version
      shell: bash
      run: |
        python3 --version
        which python

    - name: Install pyenv
      shell: bash
      run: |
        echo "Installing pyenv..."
        curl https://pyenv.run | bash

        # Add pyenv to PATH in bashrc (for later steps and tests)
        echo 'export PATH="$HOME/.pyenv/bin:$PATH"' >> ~/.bashrc
        echo 'eval "$(pyenv init --path)"' >> ~/.bashrc
        echo 'eval "$(pyenv virtualenv-init -)"' >> ~/.bashrc

        # Apply changes for the current session
        export PATH="$HOME/.pyenv/bin:$PATH"
        eval "$(pyenv init --path)"
        eval "$(pyenv virtualenv-init -)"

        # Verify installation
        pyenv --version

    - name: Install Alternate Python Version
      shell: bash
      run: |
        export PATH="$HOME/.pyenv/bin:$PATH"
        eval "$(pyenv init --path)"
        eval "$(pyenv virtualenv-init -)"

        PYTHON_ALTERNATE_VERSION="${{ inputs.alternate_version }}"
        echo "Installing Python version $PYTHON_ALTERNATE_VERSION using pyenv..."
        pyenv install -s "$PYTHON_ALTERNATE_VERSION"

        pyenv versions

        pyenv global "$PYTHON_ALTERNATE_VERSION"
        python --version
        python -m pip install --upgrade pip
        python -m pip install ipykernel

        # Undo the change and reset to system Python
        echo "Resetting pyenv to system Python..."
        pyenv global system

        # Verify that Python is reset
        python --version

    - name: Install Prebuilt Python 3.12.7 in ~/scratch (Ubuntu Only)
      if: ${{ inputs.install_undetectable_interpreters == 'true' }}
      shell: bash
      run: |
        echo "Installing Python 3.12.7 (minimal) in ~/scratch..."

        # Set installation path
        INSTALL_DIR="$HOME/scratch/python-custom"
        mkdir -p $INSTALL_DIR

        # Download the correct Python 3.12.7 minimal package from Ubuntu archive
        DEB_URL="http://archive.ubuntu.com/ubuntu/pool/main/p/python3.12/python3.12-minimal_3.12.7-1ubuntu2_amd64.deb"
        curl -fLO "$DEB_URL"

        # Verify the file format before extracting
        if file python3.12-minimal_3.12.7-1ubuntu2_amd64.deb | grep -q "Debian binary package"; then
            echo "Valid Debian package detected."
        else
            echo "Error: Downloaded file is not a valid .deb package!"
            exit 1
        fi

        # Extract the .deb package manually (without sudo)
        dpkg-deb -x python3.12-minimal_3.12.7-1ubuntu2_amd64.deb $INSTALL_DIR

        # Set the correct path for Python binary
        PYTHON_BIN="$INSTALL_DIR/usr/bin/python3.12"

        # Verify Python installation
        if [[ -x "$PYTHON_BIN" ]]; then
            echo "Python successfully extracted."
            $PYTHON_BIN --version
        else
            echo "Error: Python binary not found in extracted directory."
            exit 1
        fi

        # Manually install pip since `ensurepip` is disabled
        echo "Installing pip manually..."
        curl -sS https://bootstrap.pypa.io/get-pip.py | $PYTHON_BIN

        # Verify pip installation
        $PYTHON_BIN -m pip --version

