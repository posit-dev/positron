name: "Setup Python"
description: "Install Python dependencies and alternate version."
inputs:
  alternate_version:
    description: "The alternate version of Python to install (e.g., 3.13.0)"
    required: true
    default: "3.13.0"
  install_undetectable_interpreters:
    description: "Install undetectable interpreters"
    required: true
    type: boolean
runs:
  using: "composite"
  steps:
    - name: Install Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12.6'

    - name: Install uv
      uses: astral-sh/setup-uv@v5

    - name: Install Python dependencies
      shell: bash
      run: |
        curl https://raw.githubusercontent.com/posit-dev/qa-example-content/main/requirements.txt --output requirements.txt
        uv pip install --system -r requirements.txt
        echo "Checking installed packages..."
        python -m pip list

    - name: Verify Python Version
      shell: bash
      run: |
        python3 --version
        which python

    - name: Install pyenv
      shell: bash
      run: |
        echo "Installing pyenv..."
        curl https://pyenv.run | bash

        # Add pyenv to PATH in bashrc (for later steps and tests)
        echo 'export PATH="$HOME/.pyenv/bin:$PATH"' >> ~/.bashrc
        echo 'eval "$(pyenv init --path)"' >> ~/.bashrc
        echo 'eval "$(pyenv virtualenv-init -)"' >> ~/.bashrc

        # Apply changes for the current session
        export PATH="$HOME/.pyenv/bin:$PATH"
        eval "$(pyenv init --path)"
        eval "$(pyenv virtualenv-init -)"

        # Verify installation
        pyenv --version

    - name: Install Alternate Python Version
      shell: bash
      run: |
        export PATH="$HOME/.pyenv/bin:$PATH"
        eval "$(pyenv init --path)"
        eval "$(pyenv virtualenv-init -)"

        PYTHON_ALTERNATE_VERSION="${{ inputs.alternate_version }}"
        echo "Installing Python version $PYTHON_ALTERNATE_VERSION using pyenv..."
        pyenv install -s "$PYTHON_ALTERNATE_VERSION"

        pyenv versions

        pyenv global "$PYTHON_ALTERNATE_VERSION"
        python --version
        python -m pip install --upgrade pip
        python -m pip install ipykernel

        # Undo the change and reset to system Python
        echo "Resetting pyenv to system Python..."
        pyenv global system

        # Verify that Python is reset
        python --version

    - name: Install Prebuilt Python 3.12.7 in ~/scratch (Ubuntu Only)
      if: ${{ inputs.install_undetectable_interpreters == 'true' }}
      shell: bash
      run: |
        set -e  # Exit immediately if any command fails

        echo "Updating system and installing dependencies..."
        sudo apt update && sudo apt install -y \
          libpython3.12 python3.12-venv python3.12-distutils python3.12-lib2to3 || { echo "Failed to install dependencies"; exit 1; }

        echo "Installing Python 3.12.7 (minimal) in ~/scratch..."

        # Set installation path
        INSTALL_DIR="$HOME/scratch/python-custom"
        mkdir -p "$INSTALL_DIR"

        # List of required Python packages
        PYTHON_PKGS=("python3.12" "python3.12-minimal" "python3.12-dev")

        # Download and extract packages
        for pkg in "${PYTHON_PKGS[@]}"; do
            DEB_FILE="${pkg}_3.12.7-1ubuntu2_amd64.deb"
            DEB_URL="http://archive.ubuntu.com/ubuntu/pool/main/p/python3.12/$DEB_FILE"

            echo "Downloading $pkg..."
            if curl -fLO "$DEB_URL"; then
                echo "Extracting $DEB_FILE..."
                dpkg-deb -x "$DEB_FILE" "$INSTALL_DIR" || { echo "Error extracting $DEB_FILE"; exit 1; }
                rm -f "$DEB_FILE"  # Clean up after extraction
            else
                echo "Error: Failed to download $DEB_URL"
                exit 1
            fi
        done

        # Set Python binary path
        PYTHON_BIN="$INSTALL_DIR/usr/bin/python3.12"

        # Verify Python installation
        if [[ -x "$PYTHON_BIN" ]]; then
            echo "Python successfully installed at $PYTHON_BIN"
            $PYTHON_BIN --version
        else
            echo "Error: Python binary not found!"
            exit 1
        fi

        # Create symlinks for easier access
        echo "Creating symlinks..."
        ln -sf "$PYTHON_BIN" "$INSTALL_DIR/usr/bin/python"
        ln -sf "$PYTHON_BIN" "$INSTALL_DIR/usr/bin/python3"

        # Final verification of symlinks
        echo "Symlink verification:"
        ls -l "$INSTALL_DIR/usr/bin/python" "$INSTALL_DIR/usr/bin/python3"

        # Verify Python works after dependency installation
        echo "Final Python check..."
        $PYTHON_BIN -c "import sys; print(f'Python {sys.version} is working!')"

        echo "Installation complete!"

