name: "Setup Python"
description: "Install Python dependencies and alternate version."
inputs:
  alternate_version:
    description: "The alternate version of Python to install (e.g., 3.13.0)"
    required: true
    default: "3.13.0"
  install_undetectable_interpreters:
    description: "Install undetectable interpreters"
    required: true
    type: boolean

runs:
  using: "composite"
  steps:
    - name: Install Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12.6'

    # Pinning UV due to https://github.com/rstudio/reticulate/issues/1811
    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        version: "0.7.22"

    - name: Install Python dependencies
      shell: bash
      run: |
        curl https://raw.githubusercontent.com/posit-dev/qa-example-content/main/requirements.txt --output requirements.txt
        uv pip install --system -r requirements.txt
        echo "Checking installed packages..."
        python -m pip list

    - name: Verify Python Version
      shell: bash
      run: |
        python3 --version
        which python

    - name: Install pyenv
      shell: bash
      run: |
        echo "Installing pyenv..."
        curl https://pyenv.run | bash

        # Add pyenv to PATH in bashrc (for later steps and tests)
        echo 'export PATH="$HOME/.pyenv/bin:$PATH"' >> ~/.bashrc
        echo 'eval "$(pyenv init --path)"' >> ~/.bashrc
        echo 'eval "$(pyenv virtualenv-init -)"' >> ~/.bashrc

        # Apply changes for the current session
        export PATH="$HOME/.pyenv/bin:$PATH"
        eval "$(pyenv init --path)"
        eval "$(pyenv virtualenv-init -)"

        # Verify installation
        pyenv --version

    - name: Install Alternate Python Version
      shell: bash
      run: |
        export PATH="$HOME/.pyenv/bin:$PATH"
        eval "$(pyenv init --path)"
        eval "$(pyenv virtualenv-init -)"

        PYTHON_ALTERNATE_VERSION="${{ inputs.alternate_version }}"
        echo "Installing Python version $PYTHON_ALTERNATE_VERSION using pyenv..."
        pyenv install -s "$PYTHON_ALTERNATE_VERSION"

        pyenv versions

        pyenv global "$PYTHON_ALTERNATE_VERSION"
        python --version
        python -m pip install --upgrade pip
        python -m pip install ipykernel

        # Undo the change and reset to system Python
        echo "Resetting pyenv to system Python..."
        pyenv global system

        # Verify that Python is reset
        python --version

    - name: Create Conda Environment with Python 3.12 in ~/scratch
      if: ${{ inputs.install_undetectable_interpreters == 'true' }}
      shell: bash
      run: |
        set -e  # Exit immediately if any command fails

        echo "Setting up Conda environment with Python 3.12..."

        # Ensure Conda is available
        source "$CONDA/etc/profile.d/conda.sh"

        # Define environment path
        CONDA_ENV_DIR="$HOME/scratch/python-env"

        # NOTE: When using Minforge conda-forge is the default and override is no longer strictly necessary,
        # but we keep it to prevent any unintentional fallback if configs change.
        conda create -y --override-channels -c conda-forge -p "$CONDA_ENV_DIR" python=3.12.10 pip setuptools

        echo "Verifying Python in Conda environment..."
        "$CONDA_ENV_DIR/bin/python" --version
        "$CONDA_ENV_DIR/bin/python" -c "import sys; print(f'Python {sys.version} is working!')"

        echo "Miniforge-based Python 3.12 setup complete!"
