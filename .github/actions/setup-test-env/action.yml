name: "Setup E2E Test Environment"
description: "Install necessary dependencies for E2E testing"
inputs:
  aws-role-to-assume:
    description: "The AWS role to assume for S3 access"
    required: true
  aws-region:
    description: "The AWS region for S3"
    required: true
  github-token:
    description: "GitHub Token for accessing private repositories or APIs"
    required: true

runs:
  using: "composite"
  steps:
    # --- Needed by E2E Tests ---
    # AWS S3 Access, Graphviz, Quarto, Conda, Python + Python Deps, R + R Deps

    # --- Needed by Integration Tests ---
    # R + R Deps

    - name: Setup AWS S3 Access
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.aws-role-to-assume }}
        aws-region: ${{ inputs.aws-region }}

    - name: Setup Graphviz
      uses: ts-graphviz/setup-graphviz@v2.0.2

    - name: Setup Quarto
      uses: quarto-dev/quarto-actions/setup@v2
      env:
        GH_TOKEN: ${{ inputs.github-token }}
      with:
        tinytex: true

    - name: Install Conda (Miniforge3)
      shell: bash
      run: |
        wget -O Miniforge3.sh "https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-$(uname)-$(uname -m).sh"
        sudo bash Miniforge3.sh -b -p "${HOME}/conda"
        echo "source \"${HOME}/conda/etc/profile.d/conda.sh\"" >> ~/.bashrc
        source "${HOME}/conda/etc/profile.d/conda.sh"

    # Download dependency files for cache key calculation
    - name: Download dependency files
      shell: bash
      run: |
        curl https://raw.githubusercontent.com/posit-dev/qa-example-content/main/requirements.txt --output requirements.txt
        curl https://raw.githubusercontent.com/posit-dev/qa-example-content/main/DESCRIPTION --output DESCRIPTION

    # Install Python and Python dependencies with cache
    - name: Install System Level Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10.10"

    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: python-v2-${{ hashFiles('requirements.txt') }}

    - name: Install Python dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt
        python -m pip install ipykernel trcli

    # Install R and R pkgs with cache
    - name: Install rig, R
      shell: bash
      env:
        R_VERSION: "4.4.0" # Set the desired R version here or use an environment variable
      run: |
        curl -Ls https://github.com/r-lib/rig/releases/download/latest/rig-linux-"$(arch)"-latest.tar.gz | $(which sudo) tar xz -C /usr/local
        rig add "$R_VERSION"

    - name: Cache R Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.R
          ~/.cache/R
        key: R-v2-${{ runner.os }}-r-${{ env.R_VERSION }}-${{ hashFiles('**/DESCRIPTION') }}

    - name: Install R packages
      shell: bash
      run: |
        curl https://raw.githubusercontent.com/posit-dev/qa-example-content/main/DESCRIPTION --output DESCRIPTION
        Rscript -e "pak::local_install_dev_deps(ask = FALSE)"
