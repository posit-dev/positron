name: "Setup E2E Test Environment"
description: "Install necessary dependencies for E2E testing"
inputs:
  aws-role-to-assume:
    description: "The AWS role to assume for S3 access"
    required: true
  aws-region:
    description: "The AWS region for S3"
    required: true
  github-token:
    description: "GitHub Token for accessing private repositories or APIs"
    required: true
  install_undetectable_interpreters:
    description: "Install undetectable interpreters"
    required: true
  simulate_vscode_settings:
    description: "Whether to simulate VS Code user settings"
    required: false
    default: "false"
runs:
  using: "composite"
  steps:
    - name: Compile E2E Tests
      shell: bash
      run: npm --prefix test/e2e run compile

    - name: Simulate VS Code User Settings
      if: inputs.simulate_vscode_settings == 'true'
      shell: bash
      run: |
        echo "Simulating VS Code user settings..."
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          mkdir -p "$HOME/.config/Code/User"
          echo "Creating settings in $HOME/.config/Code/User/settings.json"
          echo '{"editor.fontSize":8,"test":"vs-code-settings","workbench.colorTheme":"Default Dark"}' > "$HOME/.config/Code/User/settings.json"
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          mkdir -p "$HOME/Library/Application Support/Code/User"
          echo "Creating settings in $HOME/Library/Application Support/Code/User/settings.json"
          echo '{"editor.fontSize":8,"test":"vs-code-settings","workbench.colorTheme":"Default Dark"}' > "$HOME/Library/Application Support/Code/User/settings.json"
        elif [[ "$RUNNER_OS" == "Windows" ]]; then
          $vscodePath="$env:APPDATA\\Code\\User"
          echo "Creating settings in $vscodePath\\settings.json"
          New-Item -ItemType Directory -Force -Path $vscodePath
          '{"editor.fontSize":8,"test":"vs-code-settings","workbench.colorTheme":"Default Dark"}' | Out-File -FilePath "$vscodePath\\settings.json" -Encoding utf8
        fi

    - name: Setup AWS S3 Access
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.aws-role-to-assume }}
        aws-region: ${{ inputs.aws-region }}

    - name: Setup Graphviz
      uses: ts-graphviz/setup-graphviz@v2.0.2

    - name: Setup Quarto
      uses: quarto-dev/quarto-actions/setup@v2
      env:
        GH_TOKEN: ${{ inputs.github-token }}
      with:
        tinytex: true

    - name: Setup Conda (Miniforge3)
      shell: bash
      run: |
        wget -O Miniforge3.sh "https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-$(uname)-$(uname -m).sh"
        sudo bash Miniforge3.sh -b -p "${HOME}/conda"
        echo "source \"${HOME}/conda/etc/profile.d/conda.sh\"" >> ~/.bashrc
        source "${HOME}/conda/etc/profile.d/conda.sh"

    - name: Setup Python
      uses: ./.github/actions/install-python
      with:
        alternate_version: "3.13.0"
        install_undetectable_interpreters: ${{ inputs.install_undetectable_interpreters }}

    - name: Setup R
      uses: ./.github/actions/install-r
      with:
        version: "4.4.0"
        alternate_version: "4.4.2"
        install_undetectable_interpreters: ${{ inputs.install_undetectable_interpreters }}
