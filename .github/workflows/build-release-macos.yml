name: "Positron: Build macOS Release"

# Callable workflow that builds Positron for MacOS
# Note: our releases are now multi-platform, coordinated by build-release.yml
on:
  workflow_call:
    inputs:
      build_number:
        required: false
        description: "The build distance number only, e.g. 123"
        default: "999"
        type: string
      short_version:
        required: true
        description: "The short version number, including the build distance, e.g. 2023.12.0-123"
        default: "2099.12.0-999"
        type: string
    outputs:
      artifact-name:
        description: "The release artifact name"
        value: ${{ jobs.macos-universal.outputs.artifact-name }}
      artifact-file:
        description: "The release artifact file"
        value: ${{ jobs.macos-universal.outputs.artifact-file }}
  workflow_dispatch:

jobs:
  build-archs:
    name: Build macOS
    runs-on: [self-hosted-production, macos, arm64]
    timeout-minutes: 60

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    strategy:
      max-parallel: 1
      matrix:
        arch: [arm64, x64]
        include:
          - arch: arm64
            arch_terminal: arm64
            homebrew_folder: /opt/homebrew
            rust_target_prefix: aarch64
          - arch: x64
            arch_terminal: x86_64
            homebrew_folder: /usr/local
            rust_target_prefix: x86_64

    steps:
      # The build artifact is one directory above the repository, so it doesn't
      # get cleaned when we checkout sources below. Clean it up now, if it
      # exists, so that we start with a clean slate.
      - name: Clean build artifacts
        run: |
          rm -rf ../VSCode-darwin-${{ matrix.arch }}

      # Checkout sources
      - name: Checkout sources
        uses: actions/checkout@v4

      # These are already installed for both architectures, but would be
      # required if we switch off a self-hosted runner, so we may as well leave
      # them in
      - name: Install zeromq dependencies
        id: install_zeromq_dependencies
        run: |
          arch -${{matrix.arch_terminal}} /bin/bash -c "${{matrix.homebrew_folder}}/bin/brew install pkg-config"
          arch -${{matrix.arch_terminal}} /bin/bash -c "${{matrix.homebrew_folder}}/bin/brew install libsodium"
          arch -${{matrix.arch_terminal}} /bin/bash -c "${{matrix.homebrew_folder}}/bin/brew install xz"

      # When running under x86, put x86 homebrew on the $PATH ahead of arm64
      # homebrew. We also force Python 3.10 (arm64) on x86 since 3.12 is not
      # compatible with the version of node-gyp currently used by Positron.
      - name: Update PATH for x86_64
        id: update_path_for_zeromq
        if: matrix.arch == 'x64'
        run: |
          echo "/opt/homebrew/opt/python@3.10/libexec/bin:${{matrix.homebrew_folder}}/bin" >> $GITHUB_PATH

      # Generate an access token. We'll need it for following steps. Note that
      # we don't generate this until right before we need it since it only
      # lasts an hour.
      - name: Create access token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.POSITRON_BOT_APP_ID }}
          private-key: ${{ secrets.POSITRON_BOT_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      # Install node itself. Also enables corepack to install modern yarn. Most
      # of the time these will be no-ops, but this allows us to auto-update the
      # node version when it changes upstream.
      - name: Install Node and Yarn
        env:
          npm_config_arch: ${{ matrix.arch }}
          POSITRON_GITHUB_PAT: ${{ steps.app-token.outputs.token }}
        run: |
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          nvm install
          corepack enable

      # Check environment. This helps diagnose build issues.
      - name: Inspect Environment
        env:
          npm_config_arch: ${{ matrix.arch }}
        run: |
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          nvm use
          echo "--- PATH ---"
          echo $PATH
          echo "--- Python Path (${{matrix.arch_terminal}}) ---"
          which python3
          echo "--- Python Version ---"
          python3 --version
          echo "--- pkg-config Path ---"
          which pkg-config
          echo "--- library paths---"
          pkg-config --libs libsodium
          pkg-config --libs liblzma
          echo "--- node environment ---"
          which node
          node --version
          which yarn
          yarn --version

      # Install node_modules binaries.
      - name: Install dependencies
        env:
          npm_config_arch: ${{ matrix.arch }}
          POSITRON_GITHUB_PAT: ${{ steps.app-token.outputs.token }}
        run: |
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          nvm use
          yarn --network-timeout 120000

      # Build client
      - name: Build client
        env:
          npm_config_arch: ${{ matrix.arch }}
          POSITRON_BUILD_NUMBER: ${{ inputs.build_number }}
        run: |
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          nvm use
          yarn gulp vscode-darwin-${{ matrix.arch }}

      # Compress client to a zip file
      - name: Create client archive
        run: |
          pushd ..
          # Clean up ZeroMQ build folder from Jupyter Adapter extension
          rm -rf VSCode-darwin-${{ matrix.arch }}/Positron.app/Contents/Resources/app/extensions/jupyter-adapter/node_modules/zeromq/build
          # Zip all remaining app contents
          zip -Xry $GITHUB_WORKSPACE/positron-${{ inputs.short_version }}-darwin-${{ matrix.arch }}.zip VSCode-darwin-${{ matrix.arch }}
          popd

      # Create build artifact
      - name: Upload client archive
        uses: actions/upload-artifact@v4
        with:
          name: positron-darwin-${{ matrix.arch }}-archive
          path: positron-${{ inputs.short_version }}-darwin-${{ matrix.arch }}.zip

  macos-universal:
    name: Create macOS universal binary
    needs: [build-archs]
    runs-on: [self-hosted-production, macos, arm64]
    timeout-minutes: 60
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      artifact-file: ${{ steps.artifact-file.outputs.result }}
      artifact-name: ${{ steps.artifact-name.outputs.result }}
    steps:
      # Checkout sources
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Create access token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.POSITRON_BOT_APP_ID }}
          private-key: ${{ secrets.POSITRON_BOT_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      # Install node_modules binaries
      - name: Install dependencies
        env:
          POSITRON_GITHUB_PAT: ${{ steps.app-token.outputs.token }}
        run: |
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          nvm use
          yarn --network-timeout 120000

      # Download arm64 and x64 binaries
      - name: Download arm64 client
        uses: actions/download-artifact@v4
        with:
          name: positron-darwin-arm64-archive

      - name: Download x64 client
        uses: actions/download-artifact@v4
        with:
          name: positron-darwin-x64-archive

      # Expand client archives produced in previous workflow steps
      - name: Expand client archives
        run: |
          unzip positron-${{ inputs.short_version }}-darwin-arm64.zip
          unzip positron-${{ inputs.short_version }}-darwin-x64.zip

      - name: Align arm64 and x64 app content
        run: |
          # Align NLS metadata files
          find VSCode-darwin-x64 -name "nls.metadata.json" | sed 's/^[^/]*//' | xargs -I {} cp "VSCode-darwin-x64{}" "VSCode-darwin-arm64{}"

      # Glue together the arm64 and x64 binaries with lipo to create a
      # universal build
      - name: Create universal build
        env:
          VSCODE_ARCH: universal
          DEBUG: "*"
        run: |
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          nvm use
          node build/darwin/create-universal-app.js $(pwd)

      # Sign the binaries and set the hardened entitlements
      - name: Sign binaries
        run: |
          # Create a temporary keychain to hold the Developer ID certificate
          security create-keychain -p pwd ${{ runner.temp }}/buildagent.keychain
          security default-keychain -s ${{ runner.temp }}/buildagent.keychain
          security unlock-keychain -p pwd ${{ runner.temp }}/buildagent.keychain

          # Import the Developer ID certificate from Github Secrets. This
          # certificate is stored in a base64 encoded blob.
          echo "${{ secrets.MACOS_DEVELOPER_CERTIFICATE }}" | base64 -D > ${{ runner.temp }}/cert.p12
          security import ${{ runner.temp }}/cert.p12 -k ${{ runner.temp }}/buildagent.keychain -P "${{ secrets.MACOS_DEVELOPER_CERTIFICATE_KEY }}" -T /usr/bin/codesign

          # Pull the code-signing identity out of the Developer ID certificate
          # and set the key partition list.
          export CODESIGN_IDENTITY=$(security find-identity -v -p codesigning ${{ runner.temp }}/buildagent.keychain | grep -oEi "([0-9A-F]{40})" | head -n 1)
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k pwd ${{ runner.temp }}/buildagent.keychain

          # Set environment variables needed by `build/darwin/sign.js`.
          export AGENT_TEMPDIRECTORY=${{ runner.temp }}
          export VSCODE_ARCH=universal

          # Perform the signature using `electron-osx-sign`
          DEBUG=electron-osx-sign* node build/darwin/sign.js $(pwd)

      # Compress universal client to a DMG file
      - name: Create universal client disk image
        run: |
          # Create the name of the DMG file we will bundle to
          export POSITRON_BUNDLE_NAME=Positron-${{ inputs.short_version }}

          # Create a symlink to /Applications, so that the disk image will have
          # a drag-to-install target for Positron.app.
          ln -nfs /Applications VSCode-darwin-universal/Applications

          # Create the disk image itself.
          hdiutil create \
            -size 2g \
            -fs "APFS" \
            -volname "${POSITRON_BUNDLE_NAME}" \
            -srcfolder "VSCode-darwin-universal" \
            -ov \
            -format "UDZO" "${GITHUB_WORKSPACE}/${POSITRON_BUNDLE_NAME}.dmg"

      # Notarize the build using an Apple service
      - name: Notarize binary
        run: |
          # Create the name of the DMG to notarize
          export NOTARIZATION_TARGET=$GITHUB_WORKSPACE/Positron-${{ inputs.short_version }}.dmg

          # Submit the DMG to Apple's notarization service. This consumes the
          # user name and password of an Apple account under which to perform
          # the notarization. The team ID `FYF2F5GFX4` provided below should
          # match the team ID of the Developer ID certificate.
          #
          # The `--wait` argument causes `xcrun` to return only when the
          # service has completed notarization.
          NOTARIZATION_OUTPUT=$(xcrun notarytool submit \
            --wait \
            --apple-id "${{ secrets.MACOS_NOTARIZATION_USER_NAME }}" \
            --password "${{ secrets.MACOS_NOTARIZATION_USER_PASSWORD }}" \
            --team-id FYF2F5GFX4 \
            --progress $NOTARIZATION_TARGET)
          echo $NOTARIZATION_OUTPUT

          # Extract the notarization ID. This comes from a line of output that looks like:
          # id: 4baf5d9e-d1e8-48ed-8f33-1f0ae06e7ad1
          NOTARIZATION_ID=$(echo $NOTARIZATION_OUTPUT | sed -n -e 's/.*[[:space:]]*id:[[:space:]]*\([^ ]*\).*/\1/p' | head -1)

          # Extract and print the notarization log.
          xcrun notarytool log \
            --apple-id "${{ secrets.MACOS_NOTARIZATION_USER_NAME }}" \
            --password "${{ secrets.MACOS_NOTARIZATION_USER_PASSWORD }}" \
            --team-id FYF2F5GFX4 \
            $NOTARIZATION_ID \
            notarization-$NOTARIZATION_ID.log
          cat notarization-$NOTARIZATION_ID.log

          # Staple the notarization ticket to the DMG. This allows for offline
          # validation with Gatekeeper.
          xcrun stapler staple $NOTARIZATION_TARGET

      # Create a regular build artifact for the universal archive, to be
      # downloaded from the actions page for testing purposes.
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: positron-darwin-universal-installer
          path: Positron-${{ inputs.short_version }}.dmg

      - name: Record artifact name
        id: artifact-name
        run: |
          echo "result=positron-darwin-universal-installer" >> $GITHUB_OUTPUT

      - name: Record artifact file
        id: artifact-file
        run: |
          echo "result=Positron-${{ inputs.short_version }}.dmg" >> $GITHUB_OUTPUT

  status:
    if: ${{ failure() }}
    runs-on: ubuntu-latest
    needs: macos-universal
    steps:
      - name: Notify slack if build fails
        uses: slackapi/slack-github-action@v1.26.0
        id: slack-failure
        with:
          payload: |
            {
              "message": "Positron MacOS build ${{ inputs.build_number }} failed",
              "status": "Failure",
              "run_url": "https://github.com/posit-dev/positron/actions/runs/${{ github.run_id }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
