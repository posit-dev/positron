/*---------------------------------------------------------------------------------------------
 *  Copyright (C) 2023 Posit Software, PBC. All rights reserved.
 *  Licensed under the Elastic License 2.0. See LICENSE.txt for license information.
 *--------------------------------------------------------------------------------------------*/

import { Disposable } from 'vs/base/common/lifecycle';
import { IRuntimeClientInstance, RuntimeClientState } from 'vs/workbench/services/languageRuntime/common/languageRuntimeClientInstance';
import { Event, Emitter } from 'vs/base/common/event';
import { DeferredPromise } from 'vs/base/common/async';
import { IPositronPlotClient } from 'vs/workbench/services/positronPlots/common/positronPlots';
import { IntrinsicSize, PositronPlotComm, RenderFormat } from 'vs/workbench/services/languageRuntime/common/positronPlotComm';
import { IPlotSize } from 'vs/workbench/services/positronPlots/common/sizingPolicy';

/**
 * The possible states for the plot client instance
 */
export enum PlotClientState {
	/** The plot client has never rendered a plot */
	Unrendered = 'unrendered',

	/** The plot client has been requested to render a plot, but hasn't done it yet. */
	RenderPending = 'render_pending',

	/** The plot client is currently rendering a plot */
	Rendering = 'rendering',

	/** The plot client has rendered a plot */
	Rendered = 'rendered',

	/** The plot client is closed (disconnected); it cannot render any further plots */
	Closed = 'closed',
}

/**
 * A rendered plot.
 */
export interface IRenderedPlot {
	/** The size of the plot, in logical pixels, if known */
	size?: IPlotSize;

	/** The pixel ratio of the device for which the plot was rendered */
	pixel_ratio: number;

	/** The plot's image URI. The URI includes the plot itself as a base64-encoded string. */
	uri: string;
}

/** The metadata associated with a Positron plot */
export interface IPositronPlotMetadata {
	/** The plot's unique ID, as supplied by the language runtime */
	id: string;

	/** The plot's moment of creation, in milliseconds since the Epoch */
	created: number;

	/** The code that created the plot, if known. */
	code: string;

	/** The plot's parent message ID; useful for jumping to associated spot in the console */
	parent_id: string;

	/** The ID of the runtime session that created the plot */
	session_id: string;
}

/**
 * A request to render a plot.
 */
interface RenderRequest {
	/**
	 * The size of the plot, in logical pixels. If undefined, the plot will be rendered at its
	 * intrinsic size, if known.
	 */
	size?: IPlotSize;

	/** The pixel ratio of the device for which the plot was rendered */
	pixel_ratio: number;

	/** The format of the plot */
	format: RenderFormat;
}

/**
 * A deferred render request. Used to track the state of a render request that
 * hasn't been fulfilled; mostly a thin wrapper over a `DeferredPromise` that
 * includes the original render request.
 */
class DeferredRender {
	private readonly deferred: DeferredPromise<IRenderedPlot>;

	constructor(public readonly renderRequest: RenderRequest) {
		this.deferred = new DeferredPromise<IRenderedPlot>();
	}

	/**
	 * Whether the render request has been completed in some way (either by
	 * completing successfully, or by being cancelled or errored).
	 */
	get isComplete(): boolean {
		return this.deferred.isSettled;
	}

	/**
	 * Cancel the render request.
	 */
	cancel(): void {
		this.deferred.cancel();
	}

	/**
	 * Report an error to the render request.
	 */
	error(err: Error): void {
		this.deferred.error(err);
	}

	/**
	 * Complete the render request.
	 */
	complete(plot: IRenderedPlot): void {
		this.deferred.complete(plot);
	}

	get promise(): Promise<IRenderedPlot> {
		return this.deferred.p;
	}
}

/**
 * An instance of a plot client widget generated by a language runtime. A plot can be rendered
 * by calling the `render` method, which returns a promise that resolves to the rendered plot.
 */
export class PlotClientInstance extends Disposable implements IPositronPlotClient {
	/**
	 * The underlying comm
	 */
	private _comm: PositronPlotComm;

	/**
	 * The currently active render request, if any.
	 */
	private _currentRender?: DeferredRender;

	/**
	 * The queued render request, if any.
	 */
	private _queuedRender?: DeferredRender;

	/**
	 * The last rendered plot, if any.
	 */
	private _lastRender?: IRenderedPlot;

	/**
	 * The timer used to throttle plot rendering requests.
	 */
	private _renderThrottleTimer?: NodeJS.Timeout;

	/**
	 * The current state of the plot client.
	 */
	private _state: PlotClientState = PlotClientState.Unrendered;

	/**
	 * The time it took to render the plot the last time it was rendered, in milliseconds.
	 */
	private _lastRenderTimeMs: number = 0;

	/**
	 * The intrinsic size of the plot, if known.
	 */
	private _intrinsicSize?: IntrinsicSize;

	/**
	 * Whether the plot has received its intrinsic size (even if it's unknown) from the runtime.
	 */
	private _receivedIntrinsicSize = false;

	/**
	 * The response of the currently active intrinsic size request, if any.
	 */
	private _currentIntrinsicSize?: Promise<IntrinsicSize | undefined>;

	/**
	 * Event that fires when the plot is closed on the runtime side, typically
	 * because the runtime exited and doesn't preserve plot state.
	 */
	onDidClose: Event<void>;
	private readonly _closeEmitter = new Emitter<void>();

	/**
	 * Event that fires when the state of the plot client changes.
	 */
	onDidChangeState: Event<PlotClientState>;
	private readonly _stateEmitter = new Emitter<PlotClientState>();

	/**
	 * Event that fires when the plot has finished rendering.
	 */
	onDidCompleteRender: Event<IRenderedPlot>;
	private readonly _completeRenderEmitter = new Emitter<IRenderedPlot>();

	/**
	 * Event that fires when the plot has been updated by the runtime and
	 * re-rendered. Note that this complements rather than replaces the
	 * `onDidCompleteRender` event, which fires for every render (user-initiated
	 * or runtime-initiated)
	 */
	onDidRenderUpdate: Event<IRenderedPlot>;
	private readonly _renderUpdateEmitter = new Emitter<IRenderedPlot>();

	onDidShowPlot: Event<void>;
	private readonly _didShowPlotEmitter = new Emitter<void>();

	/**
	 * Event that fires when the intrinsic size of the plot is set.
	 */
	onDidSetIntrinsicSize: Event<IntrinsicSize | undefined>;
	private readonly _didSetIntrinsicSizeEmitter = new Emitter<IntrinsicSize | undefined>();

	/**
	 * Creates a new plot client instance.
	 *
	 * @param _client The client instance for this plot
	 * @param metadata The plot's metadata
	 */
	constructor(
		client: IRuntimeClientInstance<any, any>,
		public readonly metadata: IPositronPlotMetadata) {
		super();

		this._comm = new PositronPlotComm(client, { render: { timeout: 30_000 }, get_intrinsic_size: { timeout: 30_000 } });

		// Connect close emitter event
		this.onDidClose = this._closeEmitter.event;
		const clientStateEvent = Event.fromObservable(client.clientState);
		clientStateEvent((state) => {
			if (state === RuntimeClientState.Closed) {
				this._closeEmitter.fire();

				// Silently cancel any pending render requests
				this._currentRender?.cancel();
				this._queuedRender?.cancel();
			}
			this._stateEmitter.fire(PlotClientState.Closed);
		});

		// Connect the state emitter event
		this.onDidChangeState = this._stateEmitter.event;

		// Connect the complete render emitter event
		this.onDidCompleteRender = this._completeRenderEmitter.event;

		// Connect the render update emitter event
		this.onDidRenderUpdate = this._renderUpdateEmitter.event;

		// Connect the show plot emitter event
		this.onDidShowPlot = this._didShowPlotEmitter.event;

		// Connect the intrinsic size emitter event
		this.onDidSetIntrinsicSize = this._didSetIntrinsicSizeEmitter.event;

		// Listen to our own state changes
		this.onDidChangeState((state) => {
			this._state = state;
		});

		// Listen for plot updates
		this._comm.onDidUpdate(async (_evt) => {
			const rendered = await this.queuePlotUpdateRequest();
			this._renderUpdateEmitter.fire(rendered);
		});

		// Listn for plot show events
		this._comm.onDidShow(async (_evt) => {
			this._didShowPlotEmitter.fire();
		});

		// Register the client instance with the runtime, so that when this instance is disposed,
		// the runtime will also dispose the client.
		this._register(this._comm);
	}

	/**
	 * Get the intrinsic size of the plot, if known.
	 *
	 * @returns A promise that resolves to the intrinsic size of the plot, if known.
	 */
	public getIntrinsicSize(): Promise<IntrinsicSize | undefined> {
		// If there's already an in-flight request, return its response.
		if (this._currentIntrinsicSize) {
			return this._currentIntrinsicSize;
		}
		this._currentIntrinsicSize = this._comm.getIntrinsicSize()
			.then((intrinsicSize) => {
				this._intrinsicSize = intrinsicSize;
				this._receivedIntrinsicSize = true;
				this._didSetIntrinsicSizeEmitter.fire(intrinsicSize);
				return intrinsicSize;
			})
			.finally(() => {
				this._currentIntrinsicSize = undefined;
			});
		return this._currentIntrinsicSize;
	}

	/**
	 * Requests that the plot be rendered at a specific size.
	 *
	 * @param size The plot size, in pixels. If undefined, the plot will be rendered at its intrinsic size.
	 * @param height The plot height, in pixels
	 * @param width The plot width, in pixels
	 * @param pixel_ratio The device pixel ratio (e.g. 1 for standard displays, 2 for retina displays)
	 * @param format The format of the plot ('png', 'svg')
	 * @returns A promise that resolves to a rendered image, or rejects with an error.
	 */
	public render(size: IPlotSize | undefined, pixel_ratio: number, format = RenderFormat.Png): Promise<IRenderedPlot> {
		// Deal with whole pixels only
		const sizeInt = size && {
			height: Math.floor(size.height),
			width: Math.floor(size.width)
		};

		// Compare against the last render request. It is normal for the same
		// render request to be made multiple times, e.g. when the UI component
		// is redrawn without changing the plot size.
		if (this._lastRender &&
			this._lastRender.size === sizeInt &&
			this._lastRender.pixel_ratio === pixel_ratio) {
			// The last render request was the same size; return the last render
			// result without performing another render.
			return Promise.resolve(this._lastRender);
		}

		// Create a new deferred promise to track the render request
		const request: RenderRequest = {
			size: sizeInt,
			pixel_ratio,
			format
		};
		const deferred = new DeferredRender(request);

		// Check which render request is currently pending. If we are currently
		// rendering, then it's the queued render request. Otherwise, it's the
		// current render request.
		const pending = this._state === PlotClientState.Rendering ?
			this._queuedRender : this._currentRender;

		// If there is already a render request in flight, cancel it; this
		// request supercedes it.
		if (pending && !pending.isComplete) {
			pending.cancel();
		}

		if (this._state === PlotClientState.Rendering) {
			// We are currently rendering; don't start another render until we're done.
			this._queuedRender = deferred;
		} else {
			// We are not currently rendering; start a new render. Render
			// immediately if we have never rendered before; otherwise, throttle
			// (debounce) the render.
			this._currentRender = deferred;
			this.scheduleRender(deferred, this._state === PlotClientState.Unrendered ? 0 : 500);
		}

		return deferred.promise;
	}

	/**
	 * Requests that the plot be rendered at a specific size, but does not
	 * store the rendered plot to _lastRender. This is useful for previewing
	 * plots without updating the plot's state.
	 *
	 * @param size The plot size, in pixels. If undefined, the plot will be rendered at its intrinsic size.
	 * @param height The plot height, in pixels
	 * @param width The plot width, in pixels
	 * @param pixel_ratio The device pixel ratio (e.g. 1 for standard displays, 2 for retina displays)
	 * @returns A promise that resolves when the render request is scheduled, or rejects with an error.
	 */
	public preview(size: IPlotSize | undefined, pixel_ratio: number, format: RenderFormat): Promise<IRenderedPlot> {
		// Deal with whole pixels only
		const sizeInt = size && {
			height: Math.floor(size.height),
			width: Math.floor(size.width)
		};

		// Create a new deferred promise to track the render request
		const request: RenderRequest = {
			size: sizeInt,
			pixel_ratio,
			format
		};
		const deferred = new DeferredRender(request);

		// Check which render request is currently pending. If we are currently
		// rendering, then it's the queued render request. Otherwise, it's the
		// current render request.
		const pending = this._state === PlotClientState.Rendering ?
			this._queuedRender : this._currentRender;

		// If there is already a render request in flight, cancel it; this
		// request supercedes it.
		if (pending && !pending.isComplete) {
			pending.cancel();
		}

		if (this._state === PlotClientState.Rendering) {
			// We are currently rendering; don't start another render until we're done.
			this._queuedRender = deferred;
		} else {
			// We are not currently rendering; start a new render. Render
			// immediately if we have never rendered before; otherwise, throttle
			// (debounce) the render.
			this._currentRender = deferred;
			this.scheduleRender(deferred, this._state === PlotClientState.Unrendered ? 0 : 500, true);
		}

		return deferred.promise;
	}

	/**
	 * Schedules the render request to be performed after a short delay.
	 *
	 * @param request The render request to schedule
	 * @param delay The delay, in milliseconds
	 */
	private scheduleRender(request: DeferredRender, delay: number, preview = false) {

		// If there is a render throttle timer, clear it
		if (this._renderThrottleTimer) {
			clearTimeout(this._renderThrottleTimer);
		}

		// If this is the first render request, perform it immediately. Otherwise,
		// throttle the request.
		this._stateEmitter.fire(PlotClientState.RenderPending);
		this._renderThrottleTimer = setTimeout(() => {
			this.performDebouncedRender(request, preview);
		}, delay);
	}

	/**
	 * Actually performs the render
	 *
	 * @param request The render request to perform
	 */
	private performDebouncedRender(request: DeferredRender, preview = false) {
		this._stateEmitter.fire(PlotClientState.Rendering);

		// Record the time that the render started so we can estimate the render time
		const startedTime = Date.now();

		// Perform the RPC request and resolve the promise when the response is received
		const renderRequest = request.renderRequest;
		this._comm.render(renderRequest.size,
			renderRequest.pixel_ratio,
			renderRequest.format).then((response) => {

				// Ignore if the request was cancelled or already fulfilled
				if (!request.isComplete) {
					// The render was successful; record the render time so we can estimate it
					// for future renders.
					const finishedTime = Date.now();
					this._lastRenderTimeMs = finishedTime - startedTime;

					// The server returned a rendered plot image; save it and resolve the promise
					const uri = `data:${response.mime_type};base64,${response.data}`;
					const renderResult = {
						...request.renderRequest,
						uri
					};
					request.complete(renderResult);

					if (!preview) {
						this._lastRender = renderResult;
						this._completeRenderEmitter.fire(renderResult);
					}
					this._stateEmitter.fire(PlotClientState.Rendered);
				}

				// If there is a queued render request, promote it to the current
				// request and perform it now. Queued renders don't have cooldown
				// period; they are already deferred because they were requested
				// while a render was in progress.
				if (this._queuedRender) {
					const queuedRender = this._queuedRender;
					this._queuedRender = undefined;
					this._currentRender = queuedRender;
					this.scheduleRender(queuedRender, 0);
				}
			}).catch((err) => {
				this._stateEmitter.fire(PlotClientState.Rendered);
				request.error(err);
			});
	}

	/**
	 * Returns the last rendered plot, if any.
	 */
	get lastRender(): IRenderedPlot | undefined {
		return this._lastRender;
	}

	/**
	 * Returns the plot's unique ID.
	 */
	get id(): string {
		return this.metadata.id;
	}

	/**
	 * Returns an estimate for the time it will take to render the plot, in milliseconds.
	 *
	 * Currently, this is just the time it took for the last succesful render to
	 * complete. In the future, we may want to use a more sophisticated
	 * algorithm to estimate the render time.
	 */
	get renderEstimateMs(): number {
		return this._lastRenderTimeMs;
	}

	/**
	 * Returns the intrinsic size of the plot, if known.
	 */
	get intrinsicSize(): IntrinsicSize | undefined {
		return this._intrinsicSize;
	}

	/**
	 * Returns a boolean indicating whether this plot has a known intrinsic size.
	 */
	get receivedIntrinsicSize(): boolean {
		return this._receivedIntrinsicSize;
	}

	/**
	 * Queues a plot update request, if necessary. Returns a promise that
	 * resolves with the rendered plot.
	 */
	private queuePlotUpdateRequest(): Promise<IRenderedPlot> {
		if (this._queuedRender) {
			// There is already a queued render request; it will take care of
			// updating the plot.
			return this._queuedRender.promise;
		}

		// If we have never rendered this plot, we can't process any updates
		// yet.
		const render = this._currentRender?.renderRequest ?? this._lastRender;
		if (!render) {
			return Promise.reject(new Error('Cannot update plot before it has been rendered'));
		}

		// Use the dimensions of the last or current render request to determine
		// the size and DPI of the plot to update.
		const sizeInt = render.size && {
			height: Math.floor(render.size.height),
			width: Math.floor(render.size.width)
		};
		const pixel_ratio = render.pixel_ratio;

		// If there is already a render request in flight, cancel it. This
		// should be exceedingly rare since if the kernel is busy processing a
		// render request, it is unlikely that it will also -- simultaneously --
		// be processing a request from the user that changes the plot.
		if (this._currentRender && !this._currentRender.isComplete) {
			this._currentRender.cancel();
			this._currentRender = undefined;
		}

		// Create and schedule a render request to update the plot, and execute
		// it right away. `scheduleRender` takes care of cancelling the render
		// timer for any previously deferred render requests.
		const req = new DeferredRender({
			size: sizeInt,
			pixel_ratio: pixel_ratio,
			format: this._currentRender?.renderRequest.format ?? RenderFormat.Png
		});

		this.scheduleRender(req, 0);
		return req.promise;
	}
}
