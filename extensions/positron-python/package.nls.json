{
    "displayName": "Python",
    "description": "Python kernel, Debugging (multi-threaded, remote), code formatting, refactoring, unit tests, and more.",
    "python.command.python.startTerminalREPL.title": "Start Terminal REPL",
    "python.command.python.startNativeREPL.title": "Start Native Python REPL",
    "python.command.python.createEnvironment.title": "Create Environment...",
    "python.command.python.createNewFile.title": "New Python File",
    "python.command.python.createTerminal.title": "Create Terminal",
    "python.command.python.execInTerminal.title": "Run Python File in Terminal",
    "python.command.python.execDashInTerminal.title": "Run Dash App in Terminal",
    "python.command.python.execFastAPIInTerminal.title": "Run FastAPI App in Terminal",
    "python.command.python.execFlaskInTerminal.title": "Run Flask App in Terminal",
    "python.command.python.execGradioInTerminal.title": "Run Gradio App in Terminal",
    "python.command.python.execShinyInTerminal.title": "Run Shiny App in Terminal",
    "python.command.python.execStreamlitInTerminal.title": "Run Streamlit App in Terminal",
    "python.command.python.debugDashInTerminal.title": "Debug Dash App in Terminal",
    "python.command.python.debugFastAPIInTerminal.title": "Debug FastAPI App in Terminal",
    "python.command.python.debugFlaskInTerminal.title": "Debug Flask App in Terminal",
    "python.command.python.debugGradioInTerminal.title": "Debug Gradio App in Terminal",
    "python.command.python.debugShinyInTerminal.title": "Debug Shiny App in Terminal",
    "python.command.python.debugStreamlitInTerminal.title": "Debug Streamlit App in Terminal",
    "python.command.python.execInConsole.title": "Run Python File in Console",
    "python.command.python.debugInTerminal.title": "Debug Python File in Terminal",
    "python.command.python.execInTerminalIcon.title": "Run Python File in Terminal",
    "python.command.python.execInDedicatedTerminal.title": "Run Python File in Dedicated Terminal",
    "python.command.python.setInterpreter.title": "Select Interpreter",
    "python.command.python.clearWorkspaceInterpreter.title": "Clear Workspace Interpreter Setting",
    "python.command.python.viewOutput.title": "Show Output",
    "python.command.python.installJupyter.title": "Install the Jupyter extension",
    "python.command.python.viewLanguageServerOutput.title": "Show Language Server Output",
    "python.command.python.configureTests.title": "Configure Tests",
    "python.command.testing.rerunFailedTests.title": "Rerun Failed Tests",
    "python.command.python.execSelectionInTerminal.title": "Run Selection/Line in Python Terminal",
    "python.command.python.execInREPL.title": "Run Selection/Line in Python REPL",
    "python.command.python.execSelectionInDjangoShell.title": "Run Selection/Line in Django Shell",
    "python.command.python.execSelectionInConsole.title": "Run Selection in Console",
    "python.command.python.reportIssue.title": "Report Issue...",
    "python.command.python.clearCacheAndReload.title": "Clear Cache and Reload Window",
    "python.command.python.analysis.restartLanguageServer.title": "Restart Language Server",
    "python.command.python.launchTensorBoard.title": "Launch TensorBoard",
    "python.command.python.refreshTensorBoard.title": "Refresh TensorBoard",
    "python.command.python.interpreterDebugInfo.title": "Print interpreter debug information to Output",
    "python.createEnvironment.contentButton.description": "Show or hide Create Environment button in the editor for `requirements.txt` or other dependency files.",
    "python.createEnvironment.trigger.description": "Detect if environment creation is required for the current project",
    "python.menu.createNewFile.title": "Python File",
    "python.editor.context.submenu.runPython": "Run Python",
    "python.editor.context.submenu.runPythonInteractive": "Run in Interactive window",
    "python.activeStateToolPath.description": "Path to the State Tool executable for ActiveState runtimes (version 0.36+).",
    "python.autoComplete.extraPaths.description": "List of paths to libraries and the like that need to be imported by auto complete engine. E.g. when using Google App SDK, the paths are not in system path, hence need to be added into this list.",
    "python.condaPath.description": "Path to the conda executable to use for activation (version 4.4+).",
    "python.environmentProviders.enable.markdownDescription": "Configures which Python environment providers are enabled in Positron. Check the box to enable or uncheck the box to disable an environment provider.\n\nRequires a restart to take effect.",
    "python.debugger.deprecatedMessage": "This configuration will be deprecated soon. Please replace `python` with `debugpy` to use the new Python Debugger extension.",
    "python.defaultInterpreterPath.description": "Path to default Python to use when extension loads up for the first time, no longer used once an interpreter is selected for the workspace. Must be an absolute path.",
    "python.interpreters.include.markdownDescription": "List of folders (absolute paths) to search for Python installations. These folders are searched in addition to the default folders for your operating system.\n\nExample: if you have Python located at `/custom/pythons/3.10.4/bin/python`, add path `/custom/pythons` or `/custom/pythons/3.10.4` to this setting.\n\nNote:  If an interpreter is both included via `python.interpreters.include` and excluded via `python.interpreters.exclude`, it will not be displayed in the Positron UI.\n\nRequires a restart to take effect.",
    "python.interpreters.exclude.markdownDescription": "List of interpreter paths or folders (absolute paths) to exclude from the available Python installations. These interpreters will not be displayed in the Positron UI.\n\nExample: Add `/usr/bin/python3` to exclude the specific interpreter, or `/opt/homebrew` to exclude all brew-installed Pythons on macOS.\n\nRequires a restart to take effect.",
    "python.envFile.description": "Absolute path to a file containing environment variable definitions.",
    "python.experiments.enabled.description": "Enables A/B tests experiments in the Python extension. If enabled, you may get included in proposed enhancements and/or features.",
    "python.experiments.optInto.description": "List of experiments to opt into. If empty, user is assigned the default experiment groups. See [here](https://github.com/microsoft/vscode-python/wiki/AB-Experiments) for more details.",
    "python.experiments.optOutFrom.description": "List of experiments to opt out of. If empty, user is assigned the default experiment groups. See [here](https://github.com/microsoft/vscode-python/wiki/AB-Experiments) for more details.",
    "python.experiments.All.description": "Combined list of all experiments.",
    "python.experiments.pythonSurveyNotification.description": "Denotes the Python Survey Notification experiment.",
    "python.experiments.pythonPromptNewToolsExt.description": "Denotes the Python Prompt New Tools Extension experiment.",
    "python.experiments.pythonTerminalEnvVarActivation.description": "Enables use of environment variables to activate terminals instead of sending activation commands.",
    "python.experiments.pythonDiscoveryUsingWorkers.description": "Enables use of worker threads to do heavy computation when discovering interpreters.",
    "python.experiments.pythonTestAdapter.description": "Denotes the Python Test Adapter experiment.",
    "python.experiments.pythonREPLSmartSend.description": "Denotes the Python REPL Smart Send experiment.",
    "python.experiments.pythonRecommendTensorboardExt.description": "Denotes the Tensorboard Extension recommendation experiment.",
    "python.globalModuleInstallation.description": "Whether to install Python modules globally when not using an environment.",
    "python.languageServerDebug.description": "Whether debug should be enabled for Positron's Python language server. Requires a restart to take effect.",
    "python.languageServerLogLevel.description": "Controls the [logging level](https://docs.python.org/3/library/logging.html#levels) of Positron's Python language server. Requires a restart to take effect.",
    "python.languageServer.description": "Defines type of the language server.",
    "python.languageServer.defaultDescription": "Automatically select a language server: Pylance if installed and available, otherwise fallback to Jedi.",
    "python.languageServer.jediDescription": "Use Jedi behind the Language Server Protocol (LSP) as a language server.",
    "python.languageServer.pylanceDescription": "Use Pylance as a language server.",
    "python.languageServer.noneDescription": "Disable language server capabilities.",
    "python.interpreter.infoVisibility.description": "Controls when to display information of selected interpreter in the status bar.",
    "python.interpreter.infoVisibility.never.description": "Never display information.",
    "python.interpreter.infoVisibility.onPythonRelated.description": "Only display information if Python-related files are opened.",
    "python.interpreter.infoVisibility.always.description": "Always display information.",
    "python.logging.level.description": "The logging level the extension logs at, defaults to 'error'",
    "python.logging.level.deprecation": "This setting is deprecated. Please use command `Developer: Set Log Level...` to set logging level.",
    "python.missingPackage.severity.description": "Set severity of missing packages in requirements.txt or pyproject.toml",
    "python.locator.description": "[Experimental] Select implementation of environment locators. This is an experimental setting while we test native environment location.",
    "python.pipenvPath.description": "Path to the pipenv executable to use for activation.",
    "python.poetryPath.description": "Path to the poetry executable.",
    "python.quietMode.description": "Start Positron's IPython shell in quiet mode, to suppress initial version and help messages (restart Positron to apply).",
    "python.pixiToolPath.description": "Path to the pixi executable.",
    "python.tensorBoard.logDirectory.description": "Set this setting to your preferred TensorBoard log directory to skip log directory prompt when starting TensorBoard.",
    "python.tensorBoard.logDirectory.markdownDeprecationMessage": "Tensorboard support has been moved to the extension [Tensorboard extension](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.tensorboard). Instead use the setting `tensorBoard.logDirectory`.",
    "python.tensorBoard.logDirectory.deprecationMessage": "Tensorboard support has been moved to the extension Tensorboard extension. Instead use the setting `tensorBoard.logDirectory`.",
    "python.terminal.shellIntegration.enabled.description": "Enable [shell integration](https://code.visualstudio.com/docs/terminal/shell-integration) for the terminals running python. Shell integration enhances the terminal experience by enabling command decorations, run recent command, improving accessibility among other things.",
    "python.terminal.activateEnvInCurrentTerminal.description": "Activate Python Environment in the current Terminal on load of the Extension.",
    "python.terminal.activateEnvironment.description": "Activate Python Environment in all Terminals created.",
    "python.terminal.executeInFileDir.description": "When executing a file in the terminal, whether to use execute in the file's directory, instead of the current open folder.",
    "python.terminal.focusAfterLaunch.description": "When launching a python terminal, whether to focus the cursor on the terminal.",
    "python.terminal.launchArgs.description": "Python launch arguments to use when executing a file in the terminal.",
    "python.testing.autoTestDiscoverOnSaveEnabled.description": "Enable auto run test discovery when saving a test file.",
    "python.testing.cwd.description": "Optional working directory for tests.",
    "python.testing.debugPort.description": "Port number used for debugging of tests.",
    "python.testing.promptToConfigure.description": "Prompt to configure a test framework if potential tests directories are discovered.",
    "python.testing.pytestArgs.description": "Arguments passed in. Each argument is a separate item in the array.",
    "python.testing.pytestEnabled.description": "Enable testing using pytest.",
    "python.testing.pytestPath.description": "Path to pytest. You can use a custom version of pytest by modifying this setting to include the full path.",
    "python.testing.unittestArgs.description": "Arguments passed in. Each argument is a separate item in the array.",
    "python.testing.unittestEnabled.description": "Enable testing using unittest.",
    "python.venvFolders.description": "Folders in your home directory to look into for virtual environments (supports pyenv, direnv and virtualenvwrapper by default).",
    "python.venvPath.description": "Path to folder with a list of Virtual Environments (e.g. ~/.pyenv, ~/Envs, ~/.virtualenvs).",
    "python.installModulesInTerminal.description": "Whether to install Python modules (such as `ipykernel`) in the Terminal, instead of in a background process. Installing modules in the Terminal allows you to see the output of the installation command.",
    "python.useBundledIpykernel.description": "Whether to prepend the bundled `ipykernel` (and its dependencies) to the Python search path for supported interpreters. When enabled, a bundled ipykernel installation will be used instead of any existing version in the active environment.\n\nRestart Positron for this setting to take effect.",
    "walkthrough.pythonWelcome.title": "Get Started with Python Development",
    "walkthrough.pythonWelcome.description": "Your first steps to set up a Python project with all the powerful tools and features that the Python extension has to offer!",
     "walkthrough.step.python.createPythonFile.title": "Create a Python file",
    "walkthrough.step.python.createPythonFolder.title": "Open a Python project folder",
    "walkthrough.step.python.createPythonFile.description": {
        "message": "[Open](command:toSide:workbench.action.files.openFile) or [create](command:toSide:workbench.action.files.newUntitledFile?%7B%22languageId%22%3A%22python%22%7D) a Python file - make sure to save it as \".py\".\n[Create Python File](command:toSide:workbench.action.files.newUntitledFile?%7B%22languageId%22%3A%22python%22%7D)",
        "comment": [
            "{Locked='](command:toSide:workbench.action.files.newUntitledFile?%7B%22languageId%22%3A%22python%22%7D'}",
            "Do not translate the 'command:*' part inside of the '(..)'. It is an internal command syntax for VS Code",
            "Please make sure there is no space between the right bracket and left parenthesis:  ]( this is an internal syntax for links"
        ]
    },
    "walkthrough.step.python.createPythonFolder.description": {
        "message": "[Open](command:workbench.action.files.openFolder) or create a project folder.\n[Open Project Folder](command:workbench.action.files.openFolder)",
        "comment":  [
            "{Locked='](command:workbench.action.files.openFolder'}",
            "Do not translate the 'command:*' part inside of the '(..)'. It is an internal command syntax for VS Code",
            "Please make sure there is no space between the right bracket and left parenthesis:  ]( this is an internal syntax for links"
        ]
    },
    "walkthrough.step.python.installPythonWin8.title": "Install Python",
    "walkthrough.step.python.installPythonWin8.description": "The Python Extension requires Python to be installed. Install Python [from python.org](https://www.python.org/downloads).\n\n[Install Python](https://www.python.org/downloads)\n",
    "walkthrough.step.python.installPythonMac.title": "Install Python",
    "walkthrough.step.python.installPythonMac.description": {
        "message": "The Python Extension requires Python to be installed. Install Python 3 through the terminal.\n[Install Python via Brew](command:python.installPythonOnMac)\n",
        "comment": [
            "{Locked='](command:python.installPythonOnMac'}",
            "Do not translate the 'command:*' part inside of the '(..)'. It is an internal command syntax for VS Code",
            "Please make sure there is no space between the right bracket and left parenthesis:  ]( this is an internal syntax for links"
        ]
    },
    "walkthrough.step.python.installPythonLinux.title": "Install Python",
    "walkthrough.step.python.installPythonLinux.description": {
        "message": "The Python Extension requires Python to be installed. Install Python 3 through the terminal.\n[Install Python via terminal](command:python.installPythonOnLinux)\n",
        "comment": [
            "{Locked='](command:python.installPythonOnLinux'}",
            "Do not translate the 'command:*' part inside of the '(..)'. It is an internal command syntax for VS Code",
            "Please make sure there is no space between the right bracket and left parenthesis:  ]( this is an internal syntax for links"
        ]
    },
    "walkthrough.step.python.selectInterpreter.title": "Select a Python Interpreter",
    "walkthrough.step.python.createEnvironment.title": "Select or create a Python environment",
    "walkthrough.step.python.createEnvironment.description": {
        "message": "Create an environment for your Python project or use [Select Python Interpreter](command:python.setInterpreter) to select an existing one.\n[Create Environment](command:python.createEnvironment)\n**Tip**: Run the ``Python: Create Environment`` command in the [Command Palette](command:workbench.action.showCommands).",
        "comment":  [
            "{Locked='](command:python.createEnvironment'}",
            "{Locked='](command:workbench.action.showCommands'}",
            "{Locked='](command:python.setInterpreter'}",
            "Do not translate the 'command:*' part inside of the '(..)'. It is an internal command syntax for VS Code",
            "Please make sure there is no space between the right bracket and left parenthesis:  ]( this is an internal syntax for links"
        ]
    },
    "walkthrough.step.python.runAndDebug.title": "Run and debug your Python file",
    "walkthrough.step.python.runAndDebug.description": "Open your Python file  and click on the play button on the top right of the editor, or press F5 when on the file and select \"Python File\" to run with the debugger. \n  \n[Learn more](https://code.visualstudio.com/docs/python/python-tutorial#_run-hello-world)",
    "walkthrough.step.python.learnMoreWithDS.title": "Keep exploring!",
    "walkthrough.step.python.learnMoreWithDS.description": {
        "message":"🎨 Explore all the features the Python extension has to offer by looking for \"Python\" in the [Command Palette](command:workbench.action.showCommands). \n 📈 Learn more about getting started with [data science](command:workbench.action.openWalkthrough?%7B%22category%22%3A%22ms-python.python%23pythonDataScienceWelcome%22%2C%22step%22%3A%22ms-python.python%23python.createNewNotebook%22%7D) in Python. \n ✨ Take a look at our [Release Notes](https://aka.ms/AA8dxtb) to learn more about the latest features. \n \n[Follow along with the Python Tutorial](https://aka.ms/AA8dqti)",
        "comment":[
            "{Locked='](command:workbench.action.showCommands'}",
            "{Locked='](command:workbench.action.openWalkthrough?%7B%22category%22%3A%22ms-python.python%23pythonDataScienceWelcome%22%2C%22step%22%3A%22ms-python.python%23python.createNewNotebook%22%7D'}",
            "Do not translate the 'command:*' part inside of the '(..)'. It is an internal command syntax for VS Code",
            "Please make sure there is no space between the right bracket and left parenthesis:  ]( this is an internal syntax for links"
        ]
    },
    "walkthrough.pythonDataScienceWelcome.title": "Get Started with Python for Data Science",
    "walkthrough.pythonDataScienceWelcome.description": "Your first steps to getting started with a Data Science project with Python!",
    "walkthrough.step.python.installJupyterExt.title": "Install Jupyter extension",
    "walkthrough.step.python.installJupyterExt.description": "If you haven't already, install the [Jupyter extension](command:workbench.extensions.search?\"ms-toolsai.jupyter\") to take full advantage of notebooks experiences in VS Code!\n \n[Search Jupyter extension](command:workbench.extensions.search?\"ms-toolsai.jupyter\")",
    "walkthrough.step.python.createNewNotebook.title": "Create or open a Jupyter Notebook",
    "walkthrough.step.python.createNewNotebook.description": "Right click in the file explorer and create a new file with an .ipynb extension. Or, open the [Command Palette](command:workbench.action.showCommands) and run the command \n``Jupyter: Create New Blank Notebook``.\n[Create new Jupyter Notebook](command:toSide:jupyter.createnewnotebook)\n If you have an existing project, you can also [open a folder](command:workbench.action.files.openFolder) and/or clone a project from GitHub: [clone a Git repository](command:git.clone).",
    "walkthrough.step.python.openInteractiveWindow.title": "Open the Python Interactive Window",
    "walkthrough.step.python.openInteractiveWindow.description": "The Python Interactive Window is a Python shell where you can execute and view the results of your Python code. You can create cells on a Python file by typing ``#%%``.\n \nTo open the interactive window anytime, open the [Command Palette](command:workbench.action.showCommands) and run the command \n``Jupyter: Create Interactive Window``.\n[Open Interactive Window](command:jupyter.createnewinteractive)",
    "walkthrough.step.python.dataScienceLearnMore.title": "Find out more!",
    "walkthrough.step.python.dataScienceLearnMore.description": "📒 Take a look into the [Jupyter extension](command:workbench.extensions.search?\"ms-toolsai.jupyter\") features, by looking for \"Jupyter\" in the [Command Palette](command:workbench.action.showCommands). \n 🏃🏻 Find out more features in our [Tutorials](https://aka.ms/AAdjzpd).  \n[Learn more](https://aka.ms/AAdar6q)",
    "walkthrough.step.python.createPythonFile.altText": "Open a Python file or a folder with a Python project.",
    "walkthrough.step.python.selectInterpreter.altText": "Selecting a Python interpreter from the status bar",
    "walkthrough.step.python.createEnvironment.altText": "Creating a Python environment from the Command Palette",
    "walkthrough.step.python.runAndDebug.altText": "How to run and debug in VS Code with F5 or the play button on the top right.",
    "walkthrough.step.python.learnMoreWithDS.altText": "Image representing our documentation page and mailing list resources.",
    "walkthrough.step.python.installJupyterExt.altText": "Creating a new Jupyter notebook",
    "walkthrough.step.python.createNewNotebook.altText": "Creating a new Jupyter notebook",
    "walkthrough.step.python.openInteractiveWindow.altText": "Opening Python interactive window",
    "walkthrough.step.python.dataScienceLearnMore.altText": "Image representing our documentation page and mailing list resources."
}
