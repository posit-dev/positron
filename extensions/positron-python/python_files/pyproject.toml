[tool.autopep8]
max_line_length = 100

[tool.black]
include = 'positron\/.*.py$|positron\/positron_ipykernel\/.*.py$|positron\/positron_ipykernel\/test_positron_.*.py$'
exclude = '''

(
  /(
    .data
    | .vscode
    | lib
    | positron/positron_ipykernel/_vendor
  )/
)
'''
line-length = 100

[tool.isort]
profile = "black"
extend_skip = ['positron/positron_ipykernel/_vendor']
known_first_party = ['positron_ipykernel']
known_third_party = ['positron_ipykernel._vendor']

[tool.pyright]
exclude = ['lib', 'positron/positron_ipykernel/_vendor']
extraPaths = ['lib/python', 'positron/positron_ipykernel/_vendor']
ignore = [
    # Ignore all pre-existing code with issues
    'get-pip.py',
    'install_debugpy.py',
    'normalizeSelection.py',
    'tensorboard_launcher.py',
    'testlauncher.py',
    'visualstudio_py_testlauncher.py',
    'testing_tools/unittest_discovery.py',
    'testing_tools/adapter/report.py',
    'testing_tools/adapter/util.py',
    'testing_tools/adapter/pytest/_discovery.py',
    'testing_tools/adapter/pytest/_pytest_item.py',
    'tests/debug_adapter/test_install_debugpy.py',
    'tests/unittestadapter/helpers.py',
    'tests/testing_tools/adapter/.data',
    'tests/testing_tools/adapter/test___main__.py',
    'tests/testing_tools/adapter/test_discovery.py',
    'tests/testing_tools/adapter/test_functional.py',
    'tests/testing_tools/adapter/test_report.py',
    'tests/testing_tools/adapter/test_util.py',
    'tests/testing_tools/adapter/pytest/test_cli.py',
    'tests/testing_tools/adapter/pytest/test_discovery.py',
    'tests/unittestadapter/.data/unittest_skip/unittest_skip_function.py',
    'tests/pytestadapter/helpers.py'
]

[tool.ruff]
line-length = 100
exclude = [
    "tests/testing_tools/adapter/.data",
    "tests/unittestadapter/.data",
    # --- Start Positron ---
    # Ignore vendored dependencies
    'lib/',
    'positron/positron_ipykernel/_vendor/',
    # --- End Positron ---
]

[tool.ruff.format]
docstring-code-format = true

# --- Start Positron ---
[tool.ruff.lint]
# Ruff's defaults are F and a subset of E.
# https://docs.astral.sh/ruff/rules/#rules
# Compatible w/ ruff formatter. https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
# Up-to-date as of Ruff 0.5.0.
select = [
#    "A",  # flake8-builtins
#    "ARG",  # flake8-unused-argument
    "ASYNC",  # flake8-async
#    "B",  # flake8-bugbear
#    "C4",  # flake8-comprehensions
#    "D2", "D400", "D403", "D419",  # pydocstyle
#    "DJ",  # flake8-django
#    "DTZ",  # flake8-dasetimez
#    "E4", "E7", "E9",  # pycodestyle (errors)
#    "EXE",  # flake8-executable
#    "F",  # Pyflakes
#    "FBT",  # flake8-boolean-trap
#    "FLY",  # flynt
#    "FURB",  # refurb
#    "I",  # isort
#    "INP",  # flake8-no-pep420
    "INT",  # flake8-gettext
    "LOG",  # flake8-logging
#    "N",  # pep8-naming
#    "NPY",  # NumPy-specific rules
#    "PD",  # pandas-vet
#    "PERF",  # Perflint
#    "PIE",  # flake8-pie
#    "PTH",  # flake8-pathlib
    # flake8-pytest-style
#    "PT006", "PT007", "PT009", "PT012", "PT014", "PT015", "PT016", "PT017", "PT018", "PT019",
#    "PT020", "PT021", "PT022", "PT024", "PT025", "PT026", "PT027",
#    "PYI",  # flake8-pyi
    "Q",  # flake8-quotes
#    "RET502", "RET503", "RET504",  # flake8-return
#    "RSE",  # flake8-raise
#    "RUF",  # Ruff-specific rules
#    "SIM",  # flake8-simplify
#    "SLF",  # flake8-self
#    "SLOT",  # flake8-slots
#    "TCH",  # flake8-type-checking
#    "UP",  # pyupgrade
#    "W",  # pycodestyle (warnings)
    "YTT",  # flake8-2020
]
# --- End Positron ---

[tool.ruff.lint.pydocstyle]
convention = "pep257"

# --- Start Positron ---
[tool.pytest.ini_options]
# Enable colors in the VSCode Test Results pane.
addopts = "--color=yes"
# --- End Positron ---
