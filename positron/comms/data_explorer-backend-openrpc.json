{
	"openrpc": "1.3.0",
	"info": {
		"title": "Data Explorer Backend",
		"version": "1.0.0"
	},
	"methods": [
		{
			"name": "get_schema",
			"summary": "Request schema",
			"description": "Request subset of column schemas for a table-like object",
            "params": [
                {
                    "name": "column_indices",
                    "description": "The column indices (relative to the filtered/selected columns) to fetch",
                    "required": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                }
            ],
			"result": {
				"schema": {
					"$ref": "#/components/schemas/table_schema"
				}
			}
		},
		{
			"name": "search_schema",
			"summary": "Search full, unfiltered table schema with column filters",
			"description": "Search full, unfiltered table schema for column names matching one or more column filters",
			"params": [
				{
					"name": "filters",
					"description": "Column filters to apply when searching",
					"required": true,
					"schema": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/column_filter"
						}
					}
				},
				{
					"name": "start_index",
					"description": "Index (starting from zero) of first result to fetch (for paging)",
					"required": false,
					"schema": {
						"type": "integer"
					}
				},
				{
					"name": "max_results",
					"description": "Maximum number of resulting column schemas to fetch from the start index",
					"required": true,
					"schema": {
						"type": "integer"
					}
				}
			],
			"result": {
				"schema": {
					"name": "search_schema_result",
					"type": "object",
					"required": [
						"matches",
						"total_num_matches"
					],
					"properties": {
						"matches": {
							"description": "A schema containing matching columns up to the max_results limit",
							"$ref": "#/components/schemas/table_schema"
						},
						"total_num_matches": {
							"description": "The total number of columns matching the filter",
							"type": "integer"
						}
					}
				}
			}
		},
		{
			"name": "get_data_values",
			"summary": "Request formatted values from table columns",
			"description": "Request data from table columns with values formatted as strings",
			"params": [
				{
					"name": "columns",
					"description": "Array of column selections",
					"required": true,
					"schema": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/column_selection"
						}
					}
				},
				{
					"name": "format_options",
					"description": "Formatting options for returning data values as strings",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/format_options"
					}
				}
			],
			"result": {
				"schema": {
					"description": "Requested values formatted as strings",
					"$ref": "#/components/schemas/table_data"
				}
			}
		},
		{
			"name": "get_row_labels",
			"summary": "Request formatted row labels from table",
			"description": "Request formatted row labels from table",
			"params": [
				{
					"name": "selection",
					"description": "Selection of row labels",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/array_selection"
					}
				},
				{
					"name": "format_options",
					"description": "Formatting options for returning labels as strings",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/format_options"
					}
				}
			],
			"result": {
				"schema": {
					"description": "Requested formatted row labels",
					"$ref": "#/components/schemas/table_row_labels"
				}
			}
		},
		{
			"name": "export_data_selection",
			"summary": "Export data selection as a string in different formats",
			"description": "Export data selection as a string in different formats like CSV, TSV, HTML",
			"params": [
				{
					"name": "selection",
					"description": "The data selection",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/table_selection"
					}
				},
				{
					"name": "format",
					"description": "Result string format",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/export_format"
					}
				}
			],
			"result": {
				"schema": {
					"name": "exported_data",
					"type": "object",
					"description": "Exported result",
					"required": [
						"data",
						"format"
					],
					"properties": {
						"data": {
							"type": "string",
							"description": "Exported data as a string suitable for copy and paste"
						},
						"format": {
							"$ref": "#/components/schemas/export_format",
							"description": "The exported data format"
						}
					}
				}
			}
		},
		{
			"name": "set_column_filters",
			"summary": "Set column filters to select subset of table columns",
			"description": "Set or clear column filters on table, replacing any previous filters",
			"params": [
				{
					"name": "filters",
					"description": "Column filters to apply (or pass empty array to clear column filters)",
					"required": true,
					"schema": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/column_filter"
						}
					}
				}
			],
			"result": {}
		},
		{
			"name": "set_row_filters",
			"summary": "Set row filters based on column values",
			"description": "Row filters to apply (or pass empty array to clear row filters)",
			"params": [
				{
					"name": "filters",
					"description": "Zero or more filters to apply",
					"required": true,
					"schema": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/row_filter"
						}
					}
				}
			],
			"result": {
				"schema": {
					"type": "object",
					"name": "filter_result",
					"description": "The result of applying filters to a table",
					"required": [
						"selected_num_rows"
					],
					"properties": {
						"selected_num_rows": {
							"type": "integer",
							"description": "Number of rows in table after applying filters"
						},
						"had_errors": {
							"type": "boolean",
							"description": "Flag indicating if there were errors in evaluation"
						}
					}
				}
			}
		},
		{
			"name": "set_sort_columns",
			"summary": "Set or clear sort-by-column(s)",
			"description": "Set or clear the columns(s) to sort by, replacing any previous sort columns",
			"params": [
				{
					"name": "sort_keys",
					"description": "Pass zero or more keys to sort by. Clears any existing keys",
					"required": true,
					"schema": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/column_sort_key"
						}
					}
				}
			],
			"result": {}
		},
		{
			"name": "get_column_profiles",
			"summary": "Request a batch of column profiles",
			"description": "Requests a statistical summary or data profile for batch of columns",
			"params": [
				{
					"name": "profiles",
					"description": "Array of requested profiles",
					"required": true,
					"schema": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/column_profile_request"
						}
					}
				},
				{
					"name": "format_options",
					"description": "Formatting options for returning data values as strings",
					"required": false,
					"schema": {
						"$ref": "#/components/schemas/format_options"
					}
				}
			],
			"result": {
				"schema": {
					"name": "column_profile_results",
					"type": "array",
					"items": {
						"$ref": "#/components/schemas/column_profile_result"
					}
				}
			}
		},
		{
			"name": "get_state",
			"summary": "Get the state",
			"description": "Request the current backend state (table metadata, explorer state, and features)",
			"params": [],
			"result": {
				"schema": {
					"type": "object",
					"name": "backend_state",
					"description": "The current backend state for the data explorer",
					"required": [
						"display_name",
						"table_shape",
						"table_unfiltered_shape",
						"has_row_labels",
						"column_filters",
						"row_filters",
						"sort_keys",
						"supported_features"
					],
					"properties": {
						"display_name": {
							"type": "string",
							"description": "Variable name or other string to display for tab name in UI"
						},
						"table_shape": {
							"description": "Number of rows and columns in table with row/column filters applied",
							"$ref": "#/components/schemas/table_shape"
						},
						"table_unfiltered_shape": {
							"description": "Number of rows and columns in table without any filters applied",
							"$ref": "#/components/schemas/table_shape"
						},
						"has_row_labels": {
							"type": "boolean",
							"description": "Indicates whether table has row labels or whether rows should be labeled by ordinal position"
						},
						"column_filters": {
							"type": "array",
							"description": "The currently applied column filters",
							"items": {
								"$ref": "#/components/schemas/column_filter"
							}
						},
						"row_filters": {
							"type": "array",
							"description": "The currently applied row filters",
							"items": {
								"$ref": "#/components/schemas/row_filter"
							}
						},
						"sort_keys": {
							"type": "array",
							"description": "The currently applied column sort keys",
							"items": {
								"$ref": "#/components/schemas/column_sort_key"
							}
						},
						"supported_features": {
							"description": "The features currently supported by the backend instance",
							"$ref": "#/components/schemas/supported_features"
						}
					}
				}
			}
		}
	],
	"components": {
		"contentDescriptors": {},
		"schemas": {
			"column_display_type": {
				"type": "string",
				"description": "Canonical Positron display name of data type",
				"enum": [
					"number",
					"boolean",
					"string",
					"date",
					"datetime",
					"time",
					"object",
					"array",
					"struct",
					"unknown"
				]
			},
			"column_schema": {
				"type": "object",
				"description": "Schema for a column in a table",
				"required": [
					"column_name",
					"column_index",
					"type_name",
					"type_display"
				],
				"properties": {
					"column_name": {
						"type": "string",
						"description": "Name of column as UTF-8 string"
					},
					"column_index": {
						"type": "integer",
						"description": "The position of the column within the table without any column filters"
					},
					"type_name": {
						"type": "string",
						"description": "Exact name of data type used by underlying table"
					},
					"type_display": {
						"description": "Canonical Positron display name of data type",
						"$ref": "#/components/schemas/column_display_type"
					},
					"description": {
						"type": "string",
						"description": "Column annotation / description"
					},
					"children": {
						"type": "array",
						"description": "Schema of nested child types",
						"items": {
							"$ref": "#/components/schemas/column_schema"
						}
					},
					"precision": {
						"type": "integer",
						"description": "Precision for decimal types"
					},
					"scale": {
						"type": "integer",
						"description": "Scale for decimal types"
					},
					"timezone": {
						"type": "string",
						"description": "Time zone for timestamp with time zone"
					},
					"type_size": {
						"type": "integer",
						"description": "Size parameter for fixed-size types (list, binary)"
					}
				}
			},
			"column_value": {
				"oneOf": [
					{
						"type": "integer",
						"name": "special_value_code"
					},
					{
						"type": "string",
						"name": "formatted_value"
					}
				]
			},
			"table_data": {
				"type": "object",
				"description": "Table values formatted as strings",
				"required": [
					"columns"
				],
				"properties": {
					"columns": {
						"type": "array",
						"description": "The columns of data",
						"items": {
							"type": "array",
							"description": "Column values",
							"items": {
								"$ref": "#/components/schemas/column_value"
							}
						}
					}
				}
			},
			"table_row_labels": {
				"type": "object",
				"description": "Formatted table row labels formatted as strings",
				"required": [
					"row_labels"
				],
				"properties": {
					"row_labels": {
						"type": "array",
						"description": "Zero or more arrays of row labels",
						"items": {
							"type": "array",
							"description": "Row labels formatted as strings",
							"items": {
								"type": "string"
							}
						}
					}
				}
			},
			"format_options": {
				"type": "object",
				"description": "Formatting options for returning data values as strings",
				"required": [
					"large_num_digits",
					"small_num_digits",
					"max_integral_digits",
					"max_value_length"
				],
				"properties": {
					"large_num_digits": {
						"type": "integer",
						"description": "Fixed number of decimal places to display for numbers over 1, or in scientific notation"
					},
					"small_num_digits": {
						"type": "integer",
						"description": "Fixed number of decimal places to display for small numbers, and to determine lower threshold for switching to scientific notation"
					},
					"max_integral_digits": {
						"type": "integer",
						"description": "Maximum number of integral digits to display before switching to scientific notation"
					},
					"max_value_length": {
						"type": "integer",
						"description": "Maximum size of formatted value, for truncating large strings or other large formatted values"
					},
					"thousands_sep": {
						"type": "string",
						"description": "Thousands separator string"
					}
				}
			},
			"table_schema": {
				"type": "object",
				"description": "The schema for a table-like object",
				"required": [
					"columns"
				],
				"properties": {
					"columns": {
						"type": "array",
						"description": "Schema for each column in the table",
						"items": {
							"$ref": "#/components/schemas/column_schema"
						}
					}
				}
			},
			"table_shape": {
				"type": "object",
				"description": "Provides number of rows and columns in a table",
				"required": [
					"num_rows",
					"num_columns"
				],
				"properties": {
					"num_rows": {
						"type": "integer",
						"description": "Numbers of rows in the table"
					},
					"num_columns": {
						"type": "integer",
						"description": "Number of columns in the table"
					}
				}
			},
			"row_filter": {
				"type": "object",
				"description": "Specifies a table row filter based on a single column's values",
				"required": [
					"filter_id",
					"filter_type",
					"column_schema",
					"condition"
				],
				"properties": {
					"filter_id": {
						"type": "string",
						"description": "Unique identifier for this filter"
					},
					"filter_type": {
						"description": "Type of row filter to apply",
						"$ref": "#/components/schemas/row_filter_type"
					},
					"column_schema": {
						"description": "Column to apply filter to",
						"$ref": "#/components/schemas/column_schema"
					},
					"condition": {
						"type": "string",
						"description": "The binary condition to use to combine with preceding row filters",
						"enum": [
							"and",
							"or"
						]
					},
					"is_valid": {
						"type": "boolean",
						"description": "Whether the filter is valid and supported by the backend, if undefined then true"
					},
					"error_message": {
						"type": "string",
						"description": "Optional error message when the filter is invalid"
					},
					"params": {
						"description": "The row filter type-specific parameters",
						"$ref": "#/components/schemas/row_filter_params"
					}
				}
			},
			"row_filter_params": {
				"description": "Union of row filter parameters",
				"oneOf": [
					{
						"name": "between",
						"$ref": "#/components/schemas/filter_between"
					},
					{
						"name": "comparison",
						"$ref": "#/components/schemas/filter_comparison"
					},
					{
						"name": "text_search",
						"$ref": "#/components/schemas/filter_text_search"
					},
					{
						"name": "set_membership",
						"$ref": "#/components/schemas/filter_set_membership"
					}
				]
			},
			"row_filter_type": {
				"type": "string",
				"description": "Type of row filter",
				"enum": [
					"between",
					"compare",
					"is_empty",
					"is_false",
					"is_null",
					"is_true",
					"not_between",
					"not_empty",
					"not_null",
					"search",
					"set_membership"
				]
			},
			"row_filter_type_support_status": {
				"type": "object",
				"description": "Support status for a row filter type",
				"required": [
					"row_filter_type",
					"support_status"
				],
				"properties": {
					"row_filter_type": {
						"description": "Type of row filter",
						"$ref": "#/components/schemas/row_filter_type"
					},
					"support_status": {
						"description": "The support status for this row filter type",
						"$ref": "#/components/schemas/support_status"
					}
				}
			},
			"filter_between": {
				"type": "object",
				"description": "Parameters for the 'between' and 'not_between' filter types",
				"required": [
					"left_value",
					"right_value"
				],
				"properties": {
					"left_value": {
						"type": "string",
						"description": "The lower limit for filtering"
					},
					"right_value": {
						"type": "string",
						"description": "The upper limit for filtering"
					}
				}
			},
			"filter_comparison": {
				"type": "object",
				"description": "Parameters for the 'compare' filter type",
				"required": [
					"op",
					"value"
				],
				"properties": {
					"op": {
						"type": "string",
						"description": "String representation of a binary comparison",
						"enum": [
							"=",
							"!=",
							"<",
							"<=",
							">",
							">="
						]
					},
					"value": {
						"type": "string",
						"description": "A stringified column value for a comparison filter"
					}
				}
			},
			"filter_set_membership": {
				"type": "object",
				"description": "Parameters for the 'set_membership' filter type",
				"required": [
					"values",
					"inclusive"
				],
				"properties": {
					"values": {
						"type": "array",
						"description": "Array of values for a set membership filter",
						"items": {
							"type": "string"
						}
					},
					"inclusive": {
						"type": "boolean",
						"description": "Filter by including only values passed (true) or excluding (false)"
					}
				}
			},
			"filter_text_search": {
				"type": "object",
				"description": "Parameters for the 'search' filter type",
				"required": [
					"search_type",
					"term",
					"case_sensitive"
				],
				"properties": {
					"search_type": {
						"$ref": "#/components/schemas/text_search_type",
						"description": "Type of search to perform"
					},
					"term": {
						"type": "string",
						"description": "String value/regex to search for"
					},
					"case_sensitive": {
						"type": "boolean",
						"description": "If true, do a case-sensitive search, otherwise case-insensitive"
					}
				}
			},
			"text_search_type": {
				"type": "string",
				"description": "Type of string text search filter to perform",
				"enum": [
					"contains",
					"starts_with",
					"ends_with",
					"regex_match"
				]
			},
			"filter_match_data_types": {
				"type": "object",
				"description": "Parameters for the 'match_data_types' filter type",
				"required": [
					"display_types"
				],
				"properties": {
					"display_types": {
						"type": "array",
						"description": "Column display types to match",
						"items": {
							"$ref": "#/components/schemas/column_display_type"
						}
					}
				}
			},
			"column_filter": {
				"type": "object",
				"description": "A filter that selects a subset of columns by name, type, or other criteria",
				"required": [
					"filter_type",
					"params"
				],
				"properties": {
					"filter_type": {
						"description": "Type of column filter to apply",
						"$ref": "#/components/schemas/column_filter_type"
					},
					"params": {
						"description": "Parameters for column filter",
						"$ref": "#/components/schemas/column_filter_params"
					}
				}
			},
			"column_filter_params": {
				"description": "Union of column filter type-specific parameters",
				"oneOf": [
					{
						"name": "text_search",
						"$ref": "#/components/schemas/filter_text_search"
					},
					{
						"name": "match_data_types",
						"$ref": "#/components/schemas/filter_match_data_types"
					}
				]
			},
			"column_filter_type": {
				"type": "string",
				"description": "Type of column filter",
				"enum": [
					"text_search",
					"match_data_types"
				]
			},
			"column_filter_type_support_status": {
				"type": "object",
				"description": "Support status for a column filter type",
				"required": [
					"column_filter_type",
					"support_status"
				],
				"properties": {
					"column_filter_type": {
						"description": "Type of column filter",
						"$ref": "#/components/schemas/column_filter_type"
					},
					"support_status": {
						"description": "The support status for this column filter type",
						"$ref": "#/components/schemas/support_status"
					}
				}
			},
			"column_profile_request": {
				"type": "object",
				"description": "A single column profile request",
				"required": [
					"column_index",
					"profiles"
				],
				"properties": {
					"column_index": {
						"type": "integer",
						"description": "The column index (absolute, relative to unfiltered table) to profile"
					},
					"profiles": {
						"type": "array",
						"description": "Column profiles needed",
						"items": {
							"$ref": "#/components/schemas/column_profile_spec"
						}
					}
				}
			},
			"column_profile_spec": {
				"type": "object",
				"description": "Parameters for a single column profile for a request for profiles",
				"required": [
					"profile_type"
				],
				"properties": {
					"profile_type": {
						"description": "Type of column profile",
						"$ref": "#/components/schemas/column_profile_type"
					},
					"params": {
						"description": "Extra parameters for different profile types",
						"$ref": "#/components/schemas/column_profile_params"
					}
				}
			},
			"column_profile_params": {
				"description": "Extra parameters for different profile types",
				"oneOf": [
					{
						"name": "histogram",
						"$ref": "#/components/schemas/column_histogram_params"
					},
					{
						"name": "frequency_table",
						"$ref": "#/components/schemas/column_frequency_table_params"
					}
				]
			},
			"column_profile_type": {
				"type": "string",
				"description": "Type of analytical column profile",
				"enum": [
					"null_count",
					"summary_stats",
					"frequency_table",
					"histogram"
				]
			},
			"column_profile_type_support_status": {
				"type": "object",
				"description": "Support status for a given column profile type",
				"required": [
					"profile_type",
					"support_status"
				],
				"properties": {
					"profile_type": {
						"description": "The type of analytical column profile",
						"$ref": "#/components/schemas/column_profile_type"
					},
					"support_status": {
						"description": "The support status for this column profile type",
						"$ref": "#/components/schemas/support_status"
					}
				}
			},
			"column_profile_result": {
				"type": "object",
				"description": "Result of computing column profile",
				"properties": {
					"null_count": {
						"description": "Result from null_count request",
						"type": "integer"
					},
					"summary_stats": {
						"description": "Results from summary_stats request",
						"$ref": "#/components/schemas/column_summary_stats"
					},
					"histogram": {
						"description": "Results from summary_stats request",
						"$ref": "#/components/schemas/column_histogram"
					},
					"frequency_table": {
						"description": "Results from frequency_table request",
						"$ref": "#/components/schemas/column_frequency_table"
					}
				}
			},
			"column_summary_stats": {
				"type": "object",
				"description": "Profile result containing summary stats for a column based on the data type",
				"required": [
					"type_display"
				],
				"properties": {
					"type_display": {
						"description": "Canonical Positron display name of data type",
						"$ref": "#/components/schemas/column_display_type"
					},
					"number_stats": {
						"description": "Statistics for a numeric data type",
						"$ref": "#/components/schemas/summary_stats_number"
					},
					"string_stats": {
						"description": "Statistics for a string-like data type",
						"$ref": "#/components/schemas/summary_stats_string"
					},
					"boolean_stats": {
						"description": "Statistics for a boolean data type",
						"$ref": "#/components/schemas/summary_stats_boolean"
					},
					"date_stats": {
						"description": "Statistics for a date data type",
						"$ref": "#/components/schemas/summary_stats_date"
					},
					"datetime_stats": {
						"description": "Statistics for a datetime data type",
						"$ref": "#/components/schemas/summary_stats_datetime"
					}
				}
			},
			"summary_stats_number": {
				"type": "object",
				"required": [],
				"properties": {
					"min_value": {
						"type": "string",
						"description": "Minimum value as string"
					},
					"max_value": {
						"type": "string",
						"description": "Maximum value as string"
					},
					"mean": {
						"type": "string",
						"description": "Average value as string"
					},
					"median": {
						"type": "string",
						"description": "Sample median (50% value) value as string"
					},
					"stdev": {
						"type": "string",
						"description": "Sample standard deviation as a string"
					}
				}
			},
			"summary_stats_boolean": {
				"type": "object",
				"required": [
					"true_count",
					"false_count"
				],
				"properties": {
					"true_count": {
						"type": "integer",
						"description": "The number of non-null true values"
					},
					"false_count": {
						"type": "integer",
						"description": "The number of non-null false values"
					}
				}
			},
			"summary_stats_string": {
				"type": "object",
				"required": [
					"num_empty",
					"num_unique"
				],
				"properties": {
					"num_empty": {
						"type": "integer",
						"description": "The number of empty / length-zero values"
					},
					"num_unique": {
						"type": "integer",
						"description": "The exact number of distinct values"
					}
				}
			},
			"summary_stats_date": {
				"type": "object",
				"required": [
					"num_unique",
					"min_date",
					"mean_date",
					"median_date",
					"max_date"
				],
				"properties": {
					"num_unique": {
						"type": "integer",
						"description": "The exact number of distinct values"
					},
					"min_date": {
						"type": "string",
						"description": "Minimum date value as string"
					},
					"mean_date": {
						"type": "string",
						"description": "Average date value as string"
					},
					"median_date": {
						"type": "string",
						"description": "Sample median (50% value) date value as string"
					},
					"max_date": {
						"type": "string",
						"description": "Maximum date value as string"
					}
				}
			},
			"summary_stats_datetime": {
				"type": "object",
				"required": [
					"num_unique",
					"min_date",
					"mean_date",
					"median_date",
					"max_date"
				],
				"properties": {
					"num_unique": {
						"type": "integer",
						"description": "The exact number of distinct values"
					},
					"min_date": {
						"type": "string",
						"description": "Minimum date value as string"
					},
					"mean_date": {
						"type": "string",
						"description": "Average date value as string"
					},
					"median_date": {
						"type": "string",
						"description": "Sample median (50% value) date value as string"
					},
					"max_date": {
						"type": "string",
						"description": "Maximum date value as string"
					},
					"timezone": {
						"type": "string",
						"description": "Time zone for timestamp with time zone"
					}
				}
			},
			"column_histogram_params": {
				"type": "object",
				"description": "Parameters for a column histogram profile request",
				"required": [
					"method"
				],
				"properties": {
					"method": {
						"description": "Method for determining number of bins",
						"type": "string",
						"enum": [
							"sturges",
							"fixed"
						]
					},
					"num_bins": {
						"type": "integer",
						"description": "Number of bins in the computed histogram"
					},
					"quantiles": {
						"type": "array",
						"description": "Sample quantiles (numbers between 0 and 1) to compute along with the histogram",
						"items": {
							"type": "number"
						}
					}
				}
			},
			"column_histogram": {
				"type": "object",
				"description": "Result from a histogram profile request",
				"required": [
					"bin_edges",
					"bin_counts",
					"quantiles"
				],
				"properties": {
					"bin_edges": {
						"type": "array",
						"description": "String-formatted versions of the bin edges, there are N + 1 where N is the number of bins",
						"items": {
							"type": "string"
						}
					},
					"bin_counts": {
						"type": "array",
						"description": "Absolute count of values in each histogram bin",
						"items": {
							"type": "integer"
						}
					},
					"quantiles": {
						"type": "array",
						"description": "Sample quantiles that were also requested",
						"items": {
							"$ref": "#/components/schemas/column_quantile_value"
						}
					}
				}
			},
			"column_frequency_table_params": {
				"type": "object",
				"description": "Parameters for a frequency_table profile request",
				"required": [
					"limit"
				],
				"properties": {
					"limit": {
						"type": "integer",
						"description": "Number of most frequently-occurring values to return. The K in TopK"
					}
				}
			},
			"column_frequency_table": {
				"type": "object",
				"description": "Result from a frequency_table profile request",
				"required": [
					"values",
					"counts"
				],
				"properties": {
					"values": {
						"type": "array",
						"description": "The formatted top values",
						"items": {
							"type": "string"
						}
					},
					"counts": {
						"type": "array",
						"description": "Counts of top values",
						"items": {
							"type": "integer"
						}
					},
					"other_count": {
						"type": "integer",
						"description": "Number of other values not accounted for in counts, excluding nulls/NA values. May be omitted"
					}
				}
			},
			"column_quantile_value": {
				"type": "object",
				"description": "An exact or approximate quantile value from a column",
				"required": [
					"q",
					"value",
					"exact"
				],
				"properties": {
					"q": {
						"type": "number",
						"description": "Quantile number; a number between 0 and 1"
					},
					"value": {
						"type": "string",
						"description": "Stringified quantile value"
					},
					"exact": {
						"type": "boolean",
						"description": "Whether value is exact or approximate (computed from binned data or sketches)"
					}
				}
			},
			"column_sort_key": {
				"type": "object",
				"description": "Specifies a column to sort by",
				"required": [
					"column_index",
					"ascending"
				],
				"properties": {
					"column_index": {
						"type": "integer",
						"description": "Column index (absolute, relative to unfiltered table) to sort by"
					},
					"ascending": {
						"type": "boolean",
						"description": "Sort order, ascending (true) or descending (false)"
					}
				}
			},
			"supported_features": {
				"type": "object",
				"description": "For each field, returns flags indicating supported features",
				"required": [
					"search_schema",
					"set_column_filters",
					"set_row_filters",
					"get_column_profiles",
					"set_sort_columns",
					"export_data_selection"
				],
				"properties": {
					"search_schema": {
						"description": "Support for 'search_schema' RPC and its features",
						"$ref": "#/components/schemas/search_schema_features"
					},
					"set_column_filters": {
						"description": "Support ofr 'set_column_filters' RPC and its features",
						"$ref": "#/components/schemas/set_column_filters_features"
					},
					"set_row_filters": {
						"description": "Support for 'set_row_filters' RPC and its features",
						"$ref": "#/components/schemas/set_row_filters_features"
					},
					"get_column_profiles": {
						"description": "Support for 'get_column_profiles' RPC and its features",
						"$ref": "#/components/schemas/get_column_profiles_features"
					},
					"set_sort_columns": {
						"description": "Support for 'set_sort_columns' RPC and its features",
						"$ref": "#/components/schemas/set_sort_columns_features"
					},
					"export_data_selection": {
						"description": "Support for 'export_data_selection' RPC and its features",
						"$ref": "#/components/schemas/export_data_selection_features"
					}
				}
			},
			"search_schema_features": {
				"type": "object",
				"description": "Feature flags for 'search_schema' RPC",
				"required": [
					"support_status",
					"supported_types"
				],
				"properties": {
					"support_status": {
						"$ref": "#/components/schemas/support_status",
						"description": "The support status for this RPC method"
					},
					"supported_types": {
						"type": "array",
						"description": "A list of supported types",
						"items": {
							"$ref": "#/components/schemas/column_filter_type_support_status"
						}
					}
				}
			},
			"set_column_filters_features": {
				"type": "object",
				"description": "Feature flags for 'set_column_filters' RPC",
				"required": [
					"support_status",
					"supported_types"
				],
				"properties": {
					"support_status": {
						"$ref": "#/components/schemas/support_status",
						"description": "The support status for this RPC method"
					},
					"supported_types": {
						"type": "array",
						"description": "A list of supported types",
						"items": {
							"$ref": "#/components/schemas/column_filter_type_support_status"
						}
					}
				}
			},
			"set_row_filters_features": {
				"type": "object",
				"description": "Feature flags for 'set_row_filters' RPC",
				"required": [
					"support_status",
					"supports_conditions",
					"supported_types"
				],
				"properties": {
					"support_status": {
						"$ref": "#/components/schemas/support_status",
						"description": "The support status for this RPC method"
					},
					"supports_conditions": {
						"$ref": "#/components/schemas/support_status",
						"description": "Whether AND/OR filter conditions are supported"
					},
					"supported_types": {
						"type": "array",
						"description": "A list of supported types",
						"items": {
							"$ref": "#/components/schemas/row_filter_type_support_status"
						}
					}
				}
			},
			"get_column_profiles_features": {
				"type": "object",
				"description": "Feature flags for 'get_column_profiles' RPC",
				"required": [
					"support_status",
					"supported_types"
				],
				"properties": {
					"support_status": {
						"$ref": "#/components/schemas/support_status",
						"description": "The support status for this RPC method"
					},
					"supported_types": {
						"type": "array",
						"description": "A list of supported types",
						"items": {
							"$ref": "#/components/schemas/column_profile_type_support_status"
						}
					}
				}
			},
			"export_data_selection_features": {
				"type": "object",
				"description": "Feature flags for 'export_data_selction' RPC",
				"required": [
					"support_status",
					"supported_formats"
				],
				"properties": {
					"support_status": {
						"$ref": "#/components/schemas/support_status",
						"description": "The support status for this RPC method"
					},
					"supported_formats": {
						"type": "array",
						"description": "Export formats supported",
						"items": {
							"$ref": "#/components/schemas/export_format"
						}
					}
				}
			},
			"set_sort_columns_features": {
				"type": "object",
				"description": "Feature flags for 'set_sort_columns' RPC",
				"required": [
					"support_status"
				],
				"properties": {
					"support_status": {
						"$ref": "#/components/schemas/support_status",
						"description": "The support status for this RPC method"
					}
				}
			},
			"table_selection": {
				"type": "object",
				"description": "A selection on the data grid, for copying to the clipboard or other actions",
				"required": [
					"kind",
					"selection"
				],
				"properties": {
					"kind": {
						"type": "string",
						"description": "Type of selection, all indices relative to filtered row/column indices",
						"enum": [
							"single_cell",
							"cell_range",
							"column_range",
							"row_range",
							"column_indices",
							"row_indices"
						]
					},
					"selection": {
						"description": "A union of selection types",
						"oneOf": [
							{
								"name": "single_cell",
								"$ref": "#/components/schemas/data_selection_single_cell"
							},
							{
								"name": "cell_range",
								"$ref": "#/components/schemas/data_selection_cell_range"
							},
							{
								"name": "index_range",
								"$ref": "#/components/schemas/data_selection_range"
							},
							{
								"name": "indices",
								"$ref": "#/components/schemas/data_selection_indices"
							}
						]
					}
				}
			},
			"data_selection_single_cell": {
				"type": "object",
				"description": "A selection that contains a single data cell",
				"required": [
					"row_index",
					"column_index"
				],
				"properties": {
					"row_index": {
						"type": "integer",
						"description": "The selected row index"
					},
					"column_index": {
						"type": "integer",
						"description": "The selected column index"
					}
				}
			},
			"data_selection_cell_range": {
				"type": "object",
				"description": "A selection that contains a rectangular range of data cells",
				"required": [
					"first_row_index",
					"last_row_index",
					"first_column_index",
					"last_column_index"
				],
				"properties": {
					"first_row_index": {
						"type": "integer",
						"description": "The starting selected row index (inclusive)"
					},
					"last_row_index": {
						"type": "integer",
						"description": "The final selected row index (inclusive)"
					},
					"first_column_index": {
						"type": "integer",
						"description": "The starting selected column index (inclusive)"
					},
					"last_column_index": {
						"type": "integer",
						"description": "The final selected column index (inclusive)"
					}
				}
			},
			"data_selection_range": {
				"type": "object",
				"description": "A contiguous selection bounded by inclusive start and end indices",
				"required": [
					"first_index",
					"last_index"
				],
				"properties": {
					"first_index": {
						"type": "integer",
						"description": "The starting selected index (inclusive)"
					},
					"last_index": {
						"type": "integer",
						"description": "The final selected index (inclusive)"
					}
				}
			},
			"data_selection_indices": {
				"type": "object",
				"description": "A selection defined by a sequence of indices to include",
				"required": [
					"indices"
				],
				"properties": {
					"indices": {
						"type": "array",
						"description": "The selected indices",
						"items": {
							"type": "integer"
						}
					}
				}
			},
			"column_selection": {
				"type": "object",
				"description": "A union of different selection types for column values",
				"required": [
					"column_index",
					"spec"
				],
				"properties": {
					"column_index": {
						"type": "integer",
						"description": "Column index (relative to unfiltered schema) to select data from"
					},
					"spec": {
						"description": "Union of selection specifications for array_selection",
						"$ref": "#/components/schemas/array_selection"
					}
				}
			},
			"array_selection": {
				"description": "Union of selection specifications for array_selection",
				"oneOf": [
					{
						"name": "select_range",
						"$ref": "#/components/schemas/data_selection_range"
					},
					{
						"name": "select_indices",
						"$ref": "#/components/schemas/data_selection_indices"
					}
				]
			},
			"export_format": {
				"type": "string",
				"description": "Exported data format",
				"enum": [
					"csv",
					"tsv",
					"html"
				]
			},
			"support_status": {
				"type": "string",
				"description": "The support status of the RPC method",
				"enum": [
					"unsupported",
					"supported",
					"experimental"
				]
			}
		}
	}
}
